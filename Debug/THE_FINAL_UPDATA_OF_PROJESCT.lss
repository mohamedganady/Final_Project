
THE_FINAL_UPDATA_OF_PROJESCT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00002de0  00002e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000d8  008000d8  00002eec  2**0
                  ALLOC
  3 .stab         0000360c  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001737  00000000  00000000  000064f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c37b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_1>
       8:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__vector_2>
       c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 14 	call	0x286e	; 0x286e <main>
      8a:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af eb       	ldi	r26, 0xBF	; 191
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f eb       	ldi	r24, 0xBF	; 191
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:
#include "USART.h"
#include "avr/io.h"
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
void UART_vInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRC = (1<<7) | (1<<3) | (1<<2) | (1<<1);
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e e8       	ldi	r24, 0x8E	; 142
     b54:	80 83       	st	Z, r24
	SET_BIT( UCSRB,2);
     b56:	aa e2       	ldi	r26, 0x2A	; 42
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	ea e2       	ldi	r30, 0x2A	; 42
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	8c 93       	st	X, r24
	// TO accecs the reg UCSRA
	//SET_BIT( UCSRC,7);
	// TO select the mode
	CLEAR_BIT( UCSRC,6);
     b64:	a0 e4       	ldi	r26, 0x40	; 64
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e0 e4       	ldi	r30, 0x40	; 64
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 7b       	andi	r24, 0xBF	; 191
     b70:	8c 93       	st	X, r24
	//TO double the speed of boad rate
	 SET_BIT( UCSRA,1);
     b72:	ab e2       	ldi	r26, 0x2B	; 43
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	eb e2       	ldi	r30, 0x2B	; 43
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	8c 93       	st	X, r24
	 // TO DIS play interrupt
	 CLEAR_BIT(UCSRB,5);
     b80:	aa e2       	ldi	r26, 0x2A	; 42
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	ea e2       	ldi	r30, 0x2A	; 42
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8f 7d       	andi	r24, 0xDF	; 223
     b8c:	8c 93       	st	X, r24
	// CLEAR_BIT(UCSRC,5);
	// CLEAR_BIT(UCSRC,4);
	 // TO select the stop bit
	// CLEAR_BIT(UCSRC,3);
	 // TO enable Tx and Rx
	 SET_BIT( UCSRB,3);
     b8e:	aa e2       	ldi	r26, 0x2A	; 42
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ea e2       	ldi	r30, 0x2A	; 42
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 60       	ori	r24, 0x08	; 8
     b9a:	8c 93       	st	X, r24
	 SET_BIT( UCSRB,4);
     b9c:	aa e2       	ldi	r26, 0x2A	; 42
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e2       	ldi	r30, 0x2A	; 42
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 61       	ori	r24, 0x10	; 16
     ba8:	8c 93       	st	X, r24
	 // TO SELECT THE boud rate 9600
	 CLEAR_BIT( UCSRC,7);
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e0 e4       	ldi	r30, 0x40	; 64
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 77       	andi	r24, 0x7F	; 127
     bb6:	8c 93       	st	X, r24
	 UBRRL = 103;
     bb8:	e9 e2       	ldi	r30, 0x29	; 41
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	87 e6       	ldi	r24, 0x67	; 103
     bbe:	80 83       	st	Z, r24
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <UART_Trans>:
void UART_Trans(u16 data)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <UART_Trans+0x6>
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     bd4:	ec e2       	ldi	r30, 0x2C	; 44
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	80 83       	st	Z, r24
	while(READ_BIT( UCSRA,6) != 1);
     bdc:	eb e2       	ldi	r30, 0x2B	; 43
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	82 95       	swap	r24
     be4:	86 95       	lsr	r24
     be6:	86 95       	lsr	r24
     be8:	83 70       	andi	r24, 0x03	; 3
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	99 f3       	breq	.-26     	; 0xbdc <UART_Trans+0x16>
	SET_BIT(UCSRA,6);
     bf6:	ab e2       	ldi	r26, 0x2B	; 43
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	eb e2       	ldi	r30, 0x2B	; 43
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	8c 93       	st	X, r24
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_RECIV>:
u16 UART_RECIV(void)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	while(READ_BIT( UCSRA,7) != 1); // while(READ_BIT( UCSRA,5) != 0);
     c16:	eb e2       	ldi	r30, 0x2B	; 43
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 1f       	adc	r24, r24
     c1e:	88 27       	eor	r24, r24
     c20:	88 1f       	adc	r24, r24
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	c1 f7       	brne	.-16     	; 0xc16 <UART_RECIV+0x8>
	SET_BIT(UCSRA,7);
     c26:	ab e2       	ldi	r26, 0x2B	; 43
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	eb e2       	ldi	r30, 0x2B	; 43
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	8c 93       	st	X, r24
	return UDR;
     c34:	ec e2       	ldi	r30, 0x2C	; 44
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <Timer_vIntial>:
#include "avr/interrupt.h"
#include "avr/io.h"
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
void Timer_vIntial(void)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	// ***********************disable the global interrupt
		CLEAR_BIT(SREG,7);
     c4c:	af e5       	ldi	r26, 0x5F	; 95
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ef e5       	ldi	r30, 0x5F	; 95
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	8c 93       	st	X, r24
	#if Select_Timer == Timer1
				//***************** compare value:
				#if pin_MODE_OCX == NON_INVERTING_MODE
				//non_inverting mode
				CLEAR_BIT(TCCR1A,4);
     c5a:	af e4       	ldi	r26, 0x4F	; 79
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ef e4       	ldi	r30, 0x4F	; 79
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 7e       	andi	r24, 0xEF	; 239
     c66:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,6);
     c68:	af e4       	ldi	r26, 0x4F	; 79
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ef e4       	ldi	r30, 0x4F	; 79
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 7b       	andi	r24, 0xBF	; 191
     c74:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,5);
     c76:	af e4       	ldi	r26, 0x4F	; 79
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ef e4       	ldi	r30, 0x4F	; 79
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,7);
     c84:	af e4       	ldi	r26, 0x4F	; 79
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	ef e4       	ldi	r30, 0x4F	; 79
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	80 68       	ori	r24, 0x80	; 128
     c90:	8c 93       	st	X, r24
				#endif
//*********************************************************************//				
				//*********************choose MODE
				#if select_mode == Fast_PWM_mode
				//choose ICR1 MODE(14)
				CLEAR_BIT(TCCR1A,0);
     c92:	af e4       	ldi	r26, 0x4F	; 79
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,1);
     ca0:	af e4       	ldi	r26, 0x4F	; 79
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ef e4       	ldi	r30, 0x4F	; 79
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,4);
     cae:	ae e4       	ldi	r26, 0x4E	; 78
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ee e4       	ldi	r30, 0x4E	; 78
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,3);
     cbc:	ae e4       	ldi	r26, 0x4E	; 78
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ee e4       	ldi	r30, 0x4E	; 78
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	8c 93       	st	X, r24
				#elif Select_CLK == CLK_8
				CLEAR_BIT(TCCR1B,0);
				SET_BIT(TCCR1B,1);
				CLEAR_BIT(TCCR1B,2);
				#elif Select_CLK == CLK_64
				SET_BIT(TCCR1B,0);
     cca:	ae e4       	ldi	r26, 0x4E	; 78
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,1);
     cd8:	ae e4       	ldi	r26, 0x4E	; 78
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ee e4       	ldi	r30, 0x4E	; 78
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,2);
     ce6:	ae e4       	ldi	r26, 0x4E	; 78
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ee e4       	ldi	r30, 0x4E	; 78
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	8c 93       	st	X, r24
		*/
				#endif
			//*****************************************************
	#endif
	// ***********************Enable the global interrupt
	SET_BIT(SREG,7);
     cf4:	af e5       	ldi	r26, 0x5F	; 95
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ef e5       	ldi	r30, 0x5F	; 95
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <SET_OCRX_value>:
void SET_OCRX_value(u16 duty)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <SET_OCRX_value+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
	#if Select_Timer == Timer1
	OCR1A = duty;
     d16:	ea e4       	ldi	r30, 0x4A	; 74
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
	/*
	#elif Select_Timer == Timer2
	
	*/
	#endif
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <SET_TOP_Timer1_value>:
void SET_TOP_Timer1_value(u16 top)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <SET_TOP_Timer1_value+0x6>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = top;
     d3a:	e6 e4       	ldi	r30, 0x46	; 70
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <PRE_LOAD_Timer>:
void PRE_LOAD_Timer(u16 k)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <PRE_LOAD_Timer+0x6>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
	#if Select_Timer == Timer1
	TCNT1 = k;
     d5e:	ec e4       	ldi	r30, 0x4C	; 76
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
	#elif Select_Timer == Timer2

	*/
	#endif

}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <__vector_1>:
#include "avr/interrupt.h"
static volatile void (*ptr_fun1)(void) = NULL;

void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	ptr_fun1();
     d9e:	e0 91 d8 00 	lds	r30, 0x00D8
     da2:	f0 91 d9 00 	lds	r31, 0x00D9
     da6:	09 95       	icall
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_2>:
void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	ptr_fun1();
     df8:	e0 91 d8 00 	lds	r30, 0x00D8
     dfc:	f0 91 d9 00 	lds	r31, 0x00D9
     e00:	09 95       	icall
} 
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_3>:
void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	ptr_fun1();
     e52:	e0 91 d8 00 	lds	r30, 0x00D8
     e56:	f0 91 d9 00 	lds	r31, 0x00D9
     e5a:	09 95       	icall
} 
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <SET_CALL_BACK>:
void SET_CALL_BACK(void (*fun_ptr)(void),u8 x)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <SET_CALL_BACK+0x6>
     e88:	00 d0       	rcall	.+0      	; 0xe8a <SET_CALL_BACK+0x8>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	6b 83       	std	Y+3, r22	; 0x03
	switch(x)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3d 83       	std	Y+5, r19	; 0x05
     e9e:	2c 83       	std	Y+4, r18	; 0x04
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	89 f0       	breq	.+34     	; 0xecc <SET_CALL_BACK+0x4a>
     eaa:	2c 81       	ldd	r18, Y+4	; 0x04
     eac:	3d 81       	ldd	r19, Y+5	; 0x05
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	31 05       	cpc	r19, r1
     eb2:	99 f0       	breq	.+38     	; 0xeda <SET_CALL_BACK+0x58>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	a1 f4       	brne	.+40     	; 0xee6 <SET_CALL_BACK+0x64>
	{
		case 1:
					ptr_fun1 = fun_ptr;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	90 93 d9 00 	sts	0x00D9, r25
     ec6:	80 93 d8 00 	sts	0x00D8, r24
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <SET_CALL_BACK+0x64>
		break;
		case 2:
					ptr_fun1 = fun_ptr;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 d9 00 	sts	0x00D9, r25
     ed4:	80 93 d8 00 	sts	0x00D8, r24
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <SET_CALL_BACK+0x64>
		break;
		case 3:
					ptr_fun1 = fun_ptr;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	90 93 d9 00 	sts	0x00D9, r25
     ee2:	80 93 d8 00 	sts	0x00D8, r24
		break;		
	}
} 
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <INT1_Enable>:
void INT1_Enable()
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(SREG,7);
     efe:	af e5       	ldi	r26, 0x5F	; 95
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e5       	ldi	r30, 0x5F	; 95
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,3);// set pD2 at input
     f0c:	a1 e3       	ldi	r26, 0x31	; 49
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e3       	ldi	r30, 0x31	; 49
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	87 7f       	andi	r24, 0xF7	; 247
     f18:	8c 93       	st	X, r24
	SET_BIT(PORTD,3);// pull up
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);// sense falling for int
     f28:	a5 e5       	ldi	r26, 0x55	; 85
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e5       	ldi	r30, 0x55	; 85
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 60       	ori	r24, 0x08	; 8
     f34:	8c 93       	st	X, r24
	SET_BIT(GICR,7);// Enable pIE for intrabt
     f36:	ab e5       	ldi	r26, 0x5B	; 91
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e5       	ldi	r30, 0x5B	; 91
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	8c 93       	st	X, r24
	SET_BIT(SREG,7);// enable GIE
     f44:	af e5       	ldi	r26, 0x5F	; 95
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ef e5       	ldi	r30, 0x5F	; 95
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	8c 93       	st	X, r24
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <SET_PIN_DIR>:
#include "../../UTILS/BIT_MATH.h"
#include "../../UTILS/STD_TYPES.h"


void SET_PIN_DIR(u8 PORT_NAME, u8 PIN_NUMBER, u8 PIN_DIR)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	27 97       	sbiw	r28, 0x07	; 7
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	6a 83       	std	Y+2, r22	; 0x02
     f70:	4b 83       	std	Y+3, r20	; 0x03
	if (PIN_DIR == OUTPUT)
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	09 f0       	breq	.+2      	; 0xf7a <SET_PIN_DIR+0x22>
     f78:	6f c0       	rjmp	.+222    	; 0x1058 <SET_PIN_DIR+0x100>
	{
		switch (PORT_NAME)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3f 83       	std	Y+7, r19	; 0x07
     f82:	2e 83       	std	Y+6, r18	; 0x06
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	49 f1       	breq	.+82     	; 0xfe0 <SET_PIN_DIR+0x88>
     f8e:	2e 81       	ldd	r18, Y+6	; 0x06
     f90:	3f 81       	ldd	r19, Y+7	; 0x07
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	2c f4       	brge	.+10     	; 0xfa2 <SET_PIN_DIR+0x4a>
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <SET_PIN_DIR+0x60>
     fa0:	ce c0       	rjmp	.+412    	; 0x113e <SET_PIN_DIR+0x1e6>
     fa2:	2e 81       	ldd	r18, Y+6	; 0x06
     fa4:	3f 81       	ldd	r19, Y+7	; 0x07
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	71 f1       	breq	.+92     	; 0x1008 <SET_PIN_DIR+0xb0>
     fac:	8e 81       	ldd	r24, Y+6	; 0x06
     fae:	9f 81       	ldd	r25, Y+7	; 0x07
     fb0:	83 30       	cpi	r24, 0x03	; 3
     fb2:	91 05       	cpc	r25, r1
     fb4:	e9 f1       	breq	.+122    	; 0x1030 <SET_PIN_DIR+0xd8>
     fb6:	c3 c0       	rjmp	.+390    	; 0x113e <SET_PIN_DIR+0x1e6>
		{
			case GROUP_A:
			SET_BIT(DDRA,PIN_NUMBER);
     fb8:	aa e3       	ldi	r26, 0x3A	; 58
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <SET_PIN_DIR+0x7e>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <SET_PIN_DIR+0x7a>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	af c0       	rjmp	.+350    	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_B:
			SET_BIT(DDRB,PIN_NUMBER);
     fe0:	a7 e3       	ldi	r26, 0x37	; 55
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e3       	ldi	r30, 0x37	; 55
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <SET_PIN_DIR+0xa6>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <SET_PIN_DIR+0xa2>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	9b c0       	rjmp	.+310    	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_C:
			SET_BIT(DDRC,PIN_NUMBER);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <SET_PIN_DIR+0xce>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <SET_PIN_DIR+0xca>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	87 c0       	rjmp	.+270    	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_D:
			SET_BIT(DDRD,PIN_NUMBER);
    1030:	a1 e3       	ldi	r26, 0x31	; 49
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e1 e3       	ldi	r30, 0x31	; 49
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <SET_PIN_DIR+0xf6>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <SET_PIN_DIR+0xf2>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	73 c0       	rjmp	.+230    	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
		}
	}
	else 
	{
		switch (PORT_NAME)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3d 83       	std	Y+5, r19	; 0x05
    1060:	2c 83       	std	Y+4, r18	; 0x04
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	59 f1       	breq	.+86     	; 0x10c2 <SET_PIN_DIR+0x16a>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <SET_PIN_DIR+0x128>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f0       	breq	.+26     	; 0x1098 <SET_PIN_DIR+0x140>
    107e:	5f c0       	rjmp	.+190    	; 0x113e <SET_PIN_DIR+0x1e6>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	89 f1       	breq	.+98     	; 0x10ec <SET_PIN_DIR+0x194>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <SET_PIN_DIR+0x13e>
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <SET_PIN_DIR+0x1be>
    1096:	53 c0       	rjmp	.+166    	; 0x113e <SET_PIN_DIR+0x1e6>
		{
			case GROUP_A:
			CLEAR_BIT(DDRA,PIN_NUMBER);
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <SET_PIN_DIR+0x15e>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <SET_PIN_DIR+0x15a>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	3e c0       	rjmp	.+124    	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_B:
			CLEAR_BIT(DDRB,PIN_NUMBER);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <SET_PIN_DIR+0x188>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <SET_PIN_DIR+0x184>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	29 c0       	rjmp	.+82     	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_C:
			CLEAR_BIT(DDRC,PIN_NUMBER);
    10ec:	a4 e3       	ldi	r26, 0x34	; 52
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e4 e3       	ldi	r30, 0x34	; 52
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <SET_PIN_DIR+0x1b2>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <SET_PIN_DIR+0x1ae>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	14 c0       	rjmp	.+40     	; 0x113e <SET_PIN_DIR+0x1e6>
			break;
			case GROUP_D:
			CLEAR_BIT(DDRD,PIN_NUMBER);
    1116:	a1 e3       	ldi	r26, 0x31	; 49
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <SET_PIN_DIR+0x1dc>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <SET_PIN_DIR+0x1d8>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
			break;
		}		
	}
}
    113e:	27 96       	adiw	r28, 0x07	; 7
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <SET_PIN_VALUE>:

void SET_PIN_VALUE(u8 PORT_NAME, u8 PIN_NUMBER, u8 PIN_VALUE)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	27 97       	sbiw	r28, 0x07	; 7
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6a 83       	std	Y+2, r22	; 0x02
    1168:	4b 83       	std	Y+3, r20	; 0x03
	if (PIN_VALUE == HIGH)
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	09 f0       	breq	.+2      	; 0x1172 <SET_PIN_VALUE+0x22>
    1170:	6f c0       	rjmp	.+222    	; 0x1250 <SET_PIN_VALUE+0x100>
	{
		switch (PORT_NAME)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3f 83       	std	Y+7, r19	; 0x07
    117a:	2e 83       	std	Y+6, r18	; 0x06
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	49 f1       	breq	.+82     	; 0x11d8 <SET_PIN_VALUE+0x88>
    1186:	2e 81       	ldd	r18, Y+6	; 0x06
    1188:	3f 81       	ldd	r19, Y+7	; 0x07
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <SET_PIN_VALUE+0x4a>
    1190:	8e 81       	ldd	r24, Y+6	; 0x06
    1192:	9f 81       	ldd	r25, Y+7	; 0x07
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <SET_PIN_VALUE+0x60>
    1198:	ce c0       	rjmp	.+412    	; 0x1336 <SET_PIN_VALUE+0x1e6>
    119a:	2e 81       	ldd	r18, Y+6	; 0x06
    119c:	3f 81       	ldd	r19, Y+7	; 0x07
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	71 f1       	breq	.+92     	; 0x1200 <SET_PIN_VALUE+0xb0>
    11a4:	8e 81       	ldd	r24, Y+6	; 0x06
    11a6:	9f 81       	ldd	r25, Y+7	; 0x07
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	e9 f1       	breq	.+122    	; 0x1228 <SET_PIN_VALUE+0xd8>
    11ae:	c3 c0       	rjmp	.+390    	; 0x1336 <SET_PIN_VALUE+0x1e6>
		{
			case GROUP_A:
			SET_BIT(PORTA,PIN_NUMBER);
    11b0:	ab e3       	ldi	r26, 0x3B	; 59
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <SET_PIN_VALUE+0x7e>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <SET_PIN_VALUE+0x7a>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	af c0       	rjmp	.+350    	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_B:
			SET_BIT(PORTB,PIN_NUMBER);
    11d8:	a8 e3       	ldi	r26, 0x38	; 56
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <SET_PIN_VALUE+0xa6>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <SET_PIN_VALUE+0xa2>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	9b c0       	rjmp	.+310    	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_C:
			SET_BIT(PORTC,PIN_NUMBER);
    1200:	a5 e3       	ldi	r26, 0x35	; 53
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e3       	ldi	r30, 0x35	; 53
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <SET_PIN_VALUE+0xce>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <SET_PIN_VALUE+0xca>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	87 c0       	rjmp	.+270    	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_D:
			SET_BIT(PORTD,PIN_NUMBER);
    1228:	a2 e3       	ldi	r26, 0x32	; 50
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e2 e3       	ldi	r30, 0x32	; 50
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <SET_PIN_VALUE+0xf6>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <SET_PIN_VALUE+0xf2>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	73 c0       	rjmp	.+230    	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
		}		
	}
	else
	{
		switch (PORT_NAME)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	59 f1       	breq	.+86     	; 0x12ba <SET_PIN_VALUE+0x16a>
    1264:	2c 81       	ldd	r18, Y+4	; 0x04
    1266:	3d 81       	ldd	r19, Y+5	; 0x05
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <SET_PIN_VALUE+0x128>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f0       	breq	.+26     	; 0x1290 <SET_PIN_VALUE+0x140>
    1276:	5f c0       	rjmp	.+190    	; 0x1336 <SET_PIN_VALUE+0x1e6>
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	89 f1       	breq	.+98     	; 0x12e4 <SET_PIN_VALUE+0x194>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <SET_PIN_VALUE+0x13e>
    128c:	40 c0       	rjmp	.+128    	; 0x130e <SET_PIN_VALUE+0x1be>
    128e:	53 c0       	rjmp	.+166    	; 0x1336 <SET_PIN_VALUE+0x1e6>
		{
			case GROUP_A:
			CLEAR_BIT(PORTA,PIN_NUMBER);
    1290:	ab e3       	ldi	r26, 0x3B	; 59
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e3       	ldi	r30, 0x3B	; 59
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <SET_PIN_VALUE+0x15e>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <SET_PIN_VALUE+0x15a>
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	3e c0       	rjmp	.+124    	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_B:
			CLEAR_BIT(PORTB,PIN_NUMBER);
    12ba:	a8 e3       	ldi	r26, 0x38	; 56
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <SET_PIN_VALUE+0x188>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <SET_PIN_VALUE+0x184>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	29 c0       	rjmp	.+82     	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_C:
			CLEAR_BIT(PORTC,PIN_NUMBER);
    12e4:	a5 e3       	ldi	r26, 0x35	; 53
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e3       	ldi	r30, 0x35	; 53
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <SET_PIN_VALUE+0x1b2>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <SET_PIN_VALUE+0x1ae>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <SET_PIN_VALUE+0x1e6>
			break;
			case GROUP_D:
			CLEAR_BIT(PORTD,PIN_NUMBER);
    130e:	a2 e3       	ldi	r26, 0x32	; 50
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <SET_PIN_VALUE+0x1dc>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <SET_PIN_VALUE+0x1d8>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
			break;
		}		
	}
}
    1336:	27 96       	adiw	r28, 0x07	; 7
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <READ_PIN_VALUE>:

u8 READ_PIN_VALUE(u8 PORT_NAME, u8 PIN_NUMBER)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <READ_PIN_VALUE+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <READ_PIN_VALUE+0x8>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	8a 83       	std	Y+2, r24	; 0x02
    1358:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (PORT_NAME)
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	4c 81       	ldd	r20, Y+4	; 0x04
    1366:	5d 81       	ldd	r21, Y+5	; 0x05
    1368:	41 30       	cpi	r20, 0x01	; 1
    136a:	51 05       	cpc	r21, r1
    136c:	41 f1       	breq	.+80     	; 0x13be <READ_PIN_VALUE+0x76>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	91 05       	cpc	r25, r1
    1376:	34 f4       	brge	.+12     	; 0x1384 <READ_PIN_VALUE+0x3c>
    1378:	2c 81       	ldd	r18, Y+4	; 0x04
    137a:	3d 81       	ldd	r19, Y+5	; 0x05
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	61 f0       	breq	.+24     	; 0x139a <READ_PIN_VALUE+0x52>
    1382:	52 c0       	rjmp	.+164    	; 0x1428 <READ_PIN_VALUE+0xe0>
    1384:	4c 81       	ldd	r20, Y+4	; 0x04
    1386:	5d 81       	ldd	r21, Y+5	; 0x05
    1388:	42 30       	cpi	r20, 0x02	; 2
    138a:	51 05       	cpc	r21, r1
    138c:	51 f1       	breq	.+84     	; 0x13e2 <READ_PIN_VALUE+0x9a>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	b9 f1       	breq	.+110    	; 0x1406 <READ_PIN_VALUE+0xbe>
    1398:	47 c0       	rjmp	.+142    	; 0x1428 <READ_PIN_VALUE+0xe0>
	{
		case GROUP_A:
		value = READ_BIT(PINA,PIN_NUMBER);
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <READ_PIN_VALUE+0x6a>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <READ_PIN_VALUE+0x66>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	35 c0       	rjmp	.+106    	; 0x1428 <READ_PIN_VALUE+0xe0>
			break;
		case GROUP_B:
		value = READ_BIT(PINB,PIN_NUMBER);
    13be:	e6 e3       	ldi	r30, 0x36	; 54
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <READ_PIN_VALUE+0x8e>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <READ_PIN_VALUE+0x8a>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	23 c0       	rjmp	.+70     	; 0x1428 <READ_PIN_VALUE+0xe0>
			break;
		case GROUP_C:
		value = READ_BIT(PINC,PIN_NUMBER);
    13e2:	e3 e3       	ldi	r30, 0x33	; 51
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a9 01       	movw	r20, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <READ_PIN_VALUE+0xb2>
    13f6:	55 95       	asr	r21
    13f8:	47 95       	ror	r20
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <READ_PIN_VALUE+0xae>
    13fe:	ca 01       	movw	r24, r20
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	11 c0       	rjmp	.+34     	; 0x1428 <READ_PIN_VALUE+0xe0>
			break;
		case GROUP_D:
		value = READ_BIT(PIND,PIN_NUMBER);
    1406:	e0 e3       	ldi	r30, 0x30	; 48
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <READ_PIN_VALUE+0xd6>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <READ_PIN_VALUE+0xd2>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
			break;		
	}
	return value;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <SET_GROUP_DIR>:


void SET_GROUP_DIR(u8 PORT_NAME, u8 PORT_DIR)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <SET_GROUP_DIR+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <SET_GROUP_DIR+0x8>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	6a 83       	std	Y+2, r22	; 0x02
		switch (PORT_NAME)
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c 83       	std	Y+4, r19	; 0x04
    1452:	2b 83       	std	Y+3, r18	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	d1 f0       	breq	.+52     	; 0x1492 <SET_GROUP_DIR+0x58>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	2c f4       	brge	.+10     	; 0x1472 <SET_GROUP_DIR+0x38>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 f0       	breq	.+24     	; 0x1488 <SET_GROUP_DIR+0x4e>
    1470:	1e c0       	rjmp	.+60     	; 0x14ae <SET_GROUP_DIR+0x74>
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <SET_GROUP_DIR+0x62>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <SET_GROUP_DIR+0x6c>
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <SET_GROUP_DIR+0x74>
		{
			case GROUP_A:
			DDRA = PORT_DIR;
    1488:	ea e3       	ldi	r30, 0x3A	; 58
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	80 83       	st	Z, r24
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <SET_GROUP_DIR+0x74>
			break;
			case GROUP_B:
			DDRB = PORT_DIR;
    1492:	e7 e3       	ldi	r30, 0x37	; 55
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	80 83       	st	Z, r24
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <SET_GROUP_DIR+0x74>
			break;
			case GROUP_C:
			DDRC = PORT_DIR;
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	80 83       	st	Z, r24
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <SET_GROUP_DIR+0x74>
			break;
			case GROUP_D:
			DDRD = PORT_DIR;
    14a6:	e1 e3       	ldi	r30, 0x31	; 49
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	80 83       	st	Z, r24
			break;
			default:break;
		}
	
}
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <SET_GROUP_VALUE>:

void SET_GROUP_VALUE(u8 PORT_NAME, u8 GROUP_VALUE)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <SET_GROUP_VALUE+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <SET_GROUP_VALUE+0x8>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
		switch (PORT_NAME)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	d1 f0       	breq	.+52     	; 0x1514 <SET_GROUP_VALUE+0x58>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <SET_GROUP_VALUE+0x38>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <SET_GROUP_VALUE+0x4e>
    14f2:	1e c0       	rjmp	.+60     	; 0x1530 <SET_GROUP_VALUE+0x74>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <SET_GROUP_VALUE+0x62>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <SET_GROUP_VALUE+0x6c>
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <SET_GROUP_VALUE+0x74>
		{
			case GROUP_A:
		    PORTA = GROUP_VALUE;
    150a:	eb e3       	ldi	r30, 0x3B	; 59
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	0e c0       	rjmp	.+28     	; 0x1530 <SET_GROUP_VALUE+0x74>
			break;
			case GROUP_B:
		    PORTB = GROUP_VALUE;
    1514:	e8 e3       	ldi	r30, 0x38	; 56
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <SET_GROUP_VALUE+0x74>
			break;
			case GROUP_C:
		    PORTC = GROUP_VALUE;
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <SET_GROUP_VALUE+0x74>
			break;
			case GROUP_D:
		    PORTD = GROUP_VALUE;
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
			break;
			default:break;

		}		
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <READ_GROUP_VALUE>:


u8 READ_GROUP_VALUE(u8 PORT_NAME)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <READ_GROUP_VALUE+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <READ_GROUP_VALUE+0x8>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
	switch (PORT_NAME)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <READ_GROUP_VALUE+0x56>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <READ_GROUP_VALUE+0x36>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <READ_GROUP_VALUE+0x4c>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <READ_GROUP_VALUE+0x72>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <READ_GROUP_VALUE+0x60>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <READ_GROUP_VALUE+0x6a>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <READ_GROUP_VALUE+0x72>
	{
		case GROUP_A:
		value = PINA;
    158a:	e9 e3       	ldi	r30, 0x39	; 57
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <READ_GROUP_VALUE+0x72>
			break;
		case GROUP_B:
		value = PINB;
    1594:	e6 e3       	ldi	r30, 0x36	; 54
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <READ_GROUP_VALUE+0x72>
			break;
		case GROUP_C:
		value = PINC;
    159e:	e3 e3       	ldi	r30, 0x33	; 51
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <READ_GROUP_VALUE+0x72>
			break;
		case GROUP_D:
		value = PIND;
    15a8:	e0 e3       	ldi	r30, 0x30	; 48
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	89 83       	std	Y+1, r24	; 0x01
			break;		
	}
	return value;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <ADC_VoidInit>:
#include "../DIO/DIO.h"
#include "../DIO/DIO_CFG.h"
#include "ADC.h"

void ADC_VoidInit(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	#if ADC_VOLTAGE == ADC_AREF_INT

	SET_BIT(ADMUX, 7);
    15c8:	a7 e2       	ldi	r26, 0x27	; 39
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e7 e2       	ldi	r30, 0x27	; 39
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	8c 93       	st	X, r24
	SET_BIT(ADMUX, 6);
    15d6:	a7 e2       	ldi	r26, 0x27	; 39
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e7 e2       	ldi	r30, 0x27	; 39
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 64       	ori	r24, 0x40	; 64
    15e2:	8c 93       	st	X, r24
	SET_BIT(ADMUX, 6);

	#endif


	ADMUX = (ADMUX & 0xE0) | (ADC_CHANNEL & 0x1F);
    15e4:	a7 e2       	ldi	r26, 0x27	; 39
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e7 e2       	ldi	r30, 0x27	; 39
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 7e       	andi	r24, 0xE0	; 224
    15f0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 7);
    15f2:	a6 e2       	ldi	r26, 0x26	; 38
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e6 e2       	ldi	r30, 0x26	; 38
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24

	#if ADC_INT_MODE == ADC_DISABLE_INT
	CLEAR_BIT(ADCSRA, 3);
    1600:	a6 e2       	ldi	r26, 0x26	; 38
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e6 e2       	ldi	r30, 0x26	; 38
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	87 7f       	andi	r24, 0xF7	; 247
    160c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 2);
	SET_BIT(ADCSRA, 1);
	SET_BIT(ADCSRA, 0);

	#elif ADC_PRESCALAR == ADC_PRE_64
	SET_BIT(ADCSRA, 2);
    160e:	a6 e2       	ldi	r26, 0x26	; 38
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e6 e2       	ldi	r30, 0x26	; 38
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
    161c:	a6 e2       	ldi	r26, 0x26	; 38
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e6 e2       	ldi	r30, 0x26	; 38
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	82 60       	ori	r24, 0x02	; 2
    1628:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA, 0);
    162a:	a6 e2       	ldi	r26, 0x26	; 38
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e2       	ldi	r30, 0x26	; 38
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA, 1);
	CLEAR_BIT(ADCSRA, 0);

	#endif

}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <ADC_VoidStartConversion>:


void ADC_VoidStartConversion(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 6);
    1646:	a6 e2       	ldi	r26, 0x26	; 38
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e6 e2       	ldi	r30, 0x26	; 38
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 64       	ori	r24, 0x40	; 64
    1652:	8c 93       	st	X, r24
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <ADC_u16ReadData>:


u16 ADC_u16ReadData(u8 ADC_u8CopyChannelId)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
		ADMUX = (ADMUX & 0xE0) | (ADC_u8CopyChannelId & 0x1F);
    1666:	a7 e2       	ldi	r26, 0x27	; 39
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e7 e2       	ldi	r30, 0x27	; 39
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	98 2f       	mov	r25, r24
    1672:	90 7e       	andi	r25, 0xE0	; 224
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	8f 71       	andi	r24, 0x1F	; 31
    1678:	89 2b       	or	r24, r25
    167a:	8c 93       	st	X, r24
		ADC_VoidStartConversion();
    167c:	0e 94 1f 0b 	call	0x163e	; 0x163e <ADC_VoidStartConversion>

		#if ADC_INT_MODE == ADC_DISABLE_INT

		while(READ_BIT(ADCSRA, 4) == 0);
    1680:	e6 e2       	ldi	r30, 0x26	; 38
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	82 95       	swap	r24
    1688:	8f 70       	andi	r24, 0x0F	; 15
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	a9 f3       	breq	.-22     	; 0x1680 <ADC_u16ReadData+0x26>
		SET_BIT(ADCSRA, 4);
    1696:	a6 e2       	ldi	r26, 0x26	; 38
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e6 e2       	ldi	r30, 0x26	; 38
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 61       	ori	r24, 0x10	; 16
    16a2:	8c 93       	st	X, r24

		#elif ADC_INT_MODE == ADC_ENABLE_INT

		#endif

		return ADC;
    16a4:	e4 e2       	ldi	r30, 0x24	; 36
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <vIniat_function_of_servo>:
#include "SERVO.h"
#include "../../MCAL/Timer/Timer.h"
void vIniat_function_of_servo(void)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	    SET_BIT(DDRD,5);
    16bc:	a1 e3       	ldi	r26, 0x31	; 49
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e1 e3       	ldi	r30, 0x31	; 49
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 62       	ori	r24, 0x20	; 32
    16c8:	8c 93       	st	X, r24
		Timer_vIntial();
    16ca:	0e 94 22 06 	call	0xc44	; 0xc44 <Timer_vIntial>
		SET_TOP_Timer1_value(2500);
    16ce:	84 ec       	ldi	r24, 0xC4	; 196
    16d0:	99 e0       	ldi	r25, 0x09	; 9
    16d2:	0e 94 96 06 	call	0xd2c	; 0xd2c <SET_TOP_Timer1_value>
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <vServo_Angle>:
void vServo_Angle(u16 angle)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <vServo_Angle+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <vServo_Angle+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
	u16 value = 0;
    16ec:	1a 82       	std	Y+2, r1	; 0x02
    16ee:	19 82       	std	Y+1, r1	; 0x01
 *
 */
	if(angle <= 180 || angle >= 0 )
	{
		//x = (angle * 250);
		value = ((angle * 250)/ 180);
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	3c 81       	ldd	r19, Y+4	; 0x04
    16f4:	8a ef       	ldi	r24, 0xFA	; 250
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	ac 01       	movw	r20, r24
    16fa:	24 9f       	mul	r18, r20
    16fc:	c0 01       	movw	r24, r0
    16fe:	25 9f       	mul	r18, r21
    1700:	90 0d       	add	r25, r0
    1702:	34 9f       	mul	r19, r20
    1704:	90 0d       	add	r25, r0
    1706:	11 24       	eor	r1, r1
    1708:	24 eb       	ldi	r18, 0xB4	; 180
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	b9 01       	movw	r22, r18
    170e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__udivmodhi4>
    1712:	cb 01       	movw	r24, r22
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
		SET_OCRX_value(value);
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	0e 94 84 06 	call	0xd08	; 0xd08 <SET_OCRX_value>
	}

}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <LCD_vInit>:
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
#include "avr/delay.h"

void LCD_vInit(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	e8 97       	sbiw	r28, 0x38	; 56
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
	SET_GROUP_DIR(LCD_DATA_PORT, 0xFF);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	6f ef       	ldi	r22, 0xFF	; 255
    1746:	0e 94 1d 0a 	call	0x143a	; 0x143a <SET_GROUP_DIR>
	SET_PIN_DIR(LCD_CTRL_PORT, RS_PIN, OUTPUT);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(LCD_CTRL_PORT, RW_PIN, OUTPUT);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(LCD_CTRL_PORT, EN_PIN, OUTPUT);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a8 e4       	ldi	r26, 0x48	; 72
    176e:	b2 e4       	ldi	r27, 0x42	; 66
    1770:	8d ab       	std	Y+53, r24	; 0x35
    1772:	9e ab       	std	Y+54, r25	; 0x36
    1774:	af ab       	std	Y+55, r26	; 0x37
    1776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6d a9       	ldd	r22, Y+53	; 0x35
    177a:	7e a9       	ldd	r23, Y+54	; 0x36
    177c:	8f a9       	ldd	r24, Y+55	; 0x37
    177e:	98 ad       	ldd	r25, Y+56	; 0x38
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	89 ab       	std	Y+49, r24	; 0x31
    1792:	9a ab       	std	Y+50, r25	; 0x32
    1794:	ab ab       	std	Y+51, r26	; 0x33
    1796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1798:	69 a9       	ldd	r22, Y+49	; 0x31
    179a:	7a a9       	ldd	r23, Y+50	; 0x32
    179c:	8b a9       	ldd	r24, Y+51	; 0x33
    179e:	9c a9       	ldd	r25, Y+52	; 0x34
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <LCD_vInit+0x8c>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	98 ab       	std	Y+48, r25	; 0x30
    17b6:	8f a7       	std	Y+47, r24	; 0x2f
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <LCD_vInit+0x10a>
	else if (__tmp > 65535)
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <LCD_vInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6d a9       	ldd	r22, Y+53	; 0x35
    17d4:	7e a9       	ldd	r23, Y+54	; 0x36
    17d6:	8f a9       	ldd	r24, Y+55	; 0x37
    17d8:	98 ad       	ldd	r25, Y+56	; 0x38
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	98 ab       	std	Y+48, r25	; 0x30
    17f8:	8f a7       	std	Y+47, r24	; 0x2f
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <LCD_vInit+0xec>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e a7       	std	Y+46, r25	; 0x2e
    1802:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1804:	8d a5       	ldd	r24, Y+45	; 0x2d
    1806:	9e a5       	ldd	r25, Y+46	; 0x2e
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_vInit+0xda>
    180c:	9e a7       	std	Y+46, r25	; 0x2e
    180e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8f a5       	ldd	r24, Y+47	; 0x2f
    1812:	98 a9       	ldd	r25, Y+48	; 0x30
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8f a5       	ldd	r24, Y+47	; 0x2f
    181c:	98 a9       	ldd	r25, Y+48	; 0x30
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <LCD_vInit+0xce>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <LCD_vInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	69 a9       	ldd	r22, Y+49	; 0x31
    1826:	7a a9       	ldd	r23, Y+50	; 0x32
    1828:	8b a9       	ldd	r24, Y+51	; 0x33
    182a:	9c a9       	ldd	r25, Y+52	; 0x34
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	8f a5       	ldd	r24, Y+47	; 0x2f
    183a:	98 a9       	ldd	r25, Y+48	; 0x30
    183c:	9c a7       	std	Y+44, r25	; 0x2c
    183e:	8b a7       	std	Y+43, r24	; 0x2b
    1840:	8b a5       	ldd	r24, Y+43	; 0x2b
    1842:	9c a5       	ldd	r25, Y+44	; 0x2c
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_vInit+0x116>
    1848:	9c a7       	std	Y+44, r25	; 0x2c
    184a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vSendCMD(TWO_LINE_LCD_Eight_BIT_MODE);
    184c:	88 e3       	ldi	r24, 0x38	; 56
    184e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a8 e4       	ldi	r26, 0x48	; 72
    1858:	b2 e4       	ldi	r27, 0x42	; 66
    185a:	8f a3       	std	Y+39, r24	; 0x27
    185c:	98 a7       	std	Y+40, r25	; 0x28
    185e:	a9 a7       	std	Y+41, r26	; 0x29
    1860:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6f a1       	ldd	r22, Y+39	; 0x27
    1864:	78 a5       	ldd	r23, Y+40	; 0x28
    1866:	89 a5       	ldd	r24, Y+41	; 0x29
    1868:	9a a5       	ldd	r25, Y+42	; 0x2a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a ef       	ldi	r20, 0xFA	; 250
    1870:	54 e4       	ldi	r21, 0x44	; 68
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8b a3       	std	Y+35, r24	; 0x23
    187c:	9c a3       	std	Y+36, r25	; 0x24
    187e:	ad a3       	std	Y+37, r26	; 0x25
    1880:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1882:	6b a1       	ldd	r22, Y+35	; 0x23
    1884:	7c a1       	ldd	r23, Y+36	; 0x24
    1886:	8d a1       	ldd	r24, Y+37	; 0x25
    1888:	9e a1       	ldd	r25, Y+38	; 0x26
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <LCD_vInit+0x176>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9a a3       	std	Y+34, r25	; 0x22
    18a0:	89 a3       	std	Y+33, r24	; 0x21
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <LCD_vInit+0x1f4>
	else if (__tmp > 65535)
    18a4:	6b a1       	ldd	r22, Y+35	; 0x23
    18a6:	7c a1       	ldd	r23, Y+36	; 0x24
    18a8:	8d a1       	ldd	r24, Y+37	; 0x25
    18aa:	9e a1       	ldd	r25, Y+38	; 0x26
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <LCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6f a1       	ldd	r22, Y+39	; 0x27
    18be:	78 a5       	ldd	r23, Y+40	; 0x28
    18c0:	89 a5       	ldd	r24, Y+41	; 0x29
    18c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <LCD_vInit+0x1d6>
    18e6:	88 ec       	ldi	r24, 0xC8	; 200
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	98 a3       	std	Y+32, r25	; 0x20
    18ec:	8f 8f       	std	Y+31, r24	; 0x1f
    18ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f0:	98 a1       	ldd	r25, Y+32	; 0x20
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_vInit+0x1c4>
    18f6:	98 a3       	std	Y+32, r25	; 0x20
    18f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	89 a1       	ldd	r24, Y+33	; 0x21
    18fc:	9a a1       	ldd	r25, Y+34	; 0x22
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9a a3       	std	Y+34, r25	; 0x22
    1902:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	89 a1       	ldd	r24, Y+33	; 0x21
    1906:	9a a1       	ldd	r25, Y+34	; 0x22
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <LCD_vInit+0x1b8>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <LCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6b a1       	ldd	r22, Y+35	; 0x23
    1910:	7c a1       	ldd	r23, Y+36	; 0x24
    1912:	8d a1       	ldd	r24, Y+37	; 0x25
    1914:	9e a1       	ldd	r25, Y+38	; 0x26
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
    1922:	89 a1       	ldd	r24, Y+33	; 0x21
    1924:	9a a1       	ldd	r25, Y+34	; 0x22
    1926:	9e 8f       	std	Y+30, r25	; 0x1e
    1928:	8d 8f       	std	Y+29, r24	; 0x1d
    192a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_vInit+0x200>
    1932:	9e 8f       	std	Y+30, r25	; 0x1e
    1934:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vSendCMD(CURSOR_OFF);
    1936:	8c e0       	ldi	r24, 0x0C	; 12
    1938:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a8 e4       	ldi	r26, 0x48	; 72
    1942:	b2 e4       	ldi	r27, 0x42	; 66
    1944:	89 8f       	std	Y+25, r24	; 0x19
    1946:	9a 8f       	std	Y+26, r25	; 0x1a
    1948:	ab 8f       	std	Y+27, r26	; 0x1b
    194a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	69 8d       	ldd	r22, Y+25	; 0x19
    194e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a ef       	ldi	r20, 0xFA	; 250
    195a:	54 e4       	ldi	r21, 0x44	; 68
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8d 8b       	std	Y+21, r24	; 0x15
    1966:	9e 8b       	std	Y+22, r25	; 0x16
    1968:	af 8b       	std	Y+23, r26	; 0x17
    196a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <LCD_vInit+0x260>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <LCD_vInit+0x2de>
	else if (__tmp > 65535)
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	98 8d       	ldd	r25, Y+24	; 0x18
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <LCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	69 8d       	ldd	r22, Y+25	; 0x19
    19a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_vInit+0x2c0>
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
    19d8:	89 89       	ldd	r24, Y+17	; 0x11
    19da:	9a 89       	ldd	r25, Y+18	; 0x12
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_vInit+0x2ae>
    19e0:	9a 8b       	std	Y+18, r25	; 0x12
    19e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8b 89       	ldd	r24, Y+19	; 0x13
    19e6:	9c 89       	ldd	r25, Y+20	; 0x14
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8b 89       	ldd	r24, Y+19	; 0x13
    19f0:	9c 89       	ldd	r25, Y+20	; 0x14
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_vInit+0x2a2>
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <LCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	6d 89       	ldd	r22, Y+21	; 0x15
    19fa:	7e 89       	ldd	r23, Y+22	; 0x16
    19fc:	8f 89       	ldd	r24, Y+23	; 0x17
    19fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9c 8b       	std	Y+20, r25	; 0x14
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
    1a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
    1a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a16:	98 89       	ldd	r25, Y+16	; 0x10
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_vInit+0x2ea>
    1a1c:	98 8b       	std	Y+16, r25	; 0x10
    1a1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vSendCMD(CLEAR_COMMAND);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a8 e4       	ldi	r26, 0x48	; 72
    1a2c:	b2 e4       	ldi	r27, 0x42	; 66
    1a2e:	8b 87       	std	Y+11, r24	; 0x0b
    1a30:	9c 87       	std	Y+12, r25	; 0x0c
    1a32:	ad 87       	std	Y+13, r26	; 0x0d
    1a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a ef       	ldi	r20, 0xFA	; 250
    1a44:	54 e4       	ldi	r21, 0x44	; 68
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8f 83       	std	Y+7, r24	; 0x07
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	a9 87       	std	Y+9, r26	; 0x09
    1a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <LCD_vInit+0x34a>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <LCD_vInit+0x3c8>
	else if (__tmp > 65535)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <LCD_vInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <LCD_vInit+0x3aa>
    1aba:	88 ec       	ldi	r24, 0xC8	; 200
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <LCD_vInit+0x398>
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <LCD_vInit+0x38c>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <LCD_vInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_vInit+0x3d4>
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
	
	
	
	

}
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_vSendCMD>:

void LCD_vSendCMD(u8 cmd)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	e9 97       	sbiw	r28, 0x39	; 57
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	89 af       	std	Y+57, r24	; 0x39
	SET_PIN_VALUE(LCD_CTRL_PORT, RS_PIN, LOW);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(LCD_CTRL_PORT, RW_PIN, LOW);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, LOW);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a8 e4       	ldi	r26, 0x48	; 72
    1b56:	b2 e4       	ldi	r27, 0x42	; 66
    1b58:	8d ab       	std	Y+53, r24	; 0x35
    1b5a:	9e ab       	std	Y+54, r25	; 0x36
    1b5c:	af ab       	std	Y+55, r26	; 0x37
    1b5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6d a9       	ldd	r22, Y+53	; 0x35
    1b62:	7e a9       	ldd	r23, Y+54	; 0x36
    1b64:	8f a9       	ldd	r24, Y+55	; 0x37
    1b66:	98 ad       	ldd	r25, Y+56	; 0x38
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	89 ab       	std	Y+49, r24	; 0x31
    1b7a:	9a ab       	std	Y+50, r25	; 0x32
    1b7c:	ab ab       	std	Y+51, r26	; 0x33
    1b7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b80:	69 a9       	ldd	r22, Y+49	; 0x31
    1b82:	7a a9       	ldd	r23, Y+50	; 0x32
    1b84:	8b a9       	ldd	r24, Y+51	; 0x33
    1b86:	9c a9       	ldd	r25, Y+52	; 0x34
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_vSendCMD+0x86>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	98 ab       	std	Y+48, r25	; 0x30
    1b9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_vSendCMD+0x104>
	else if (__tmp > 65535)
    1ba2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba8:	9c a9       	ldd	r25, Y+52	; 0x34
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_vSendCMD+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6d a9       	ldd	r22, Y+53	; 0x35
    1bbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	98 ab       	std	Y+48, r25	; 0x30
    1be0:	8f a7       	std	Y+47, r24	; 0x2f
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_vSendCMD+0xe6>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e a7       	std	Y+46, r25	; 0x2e
    1bea:	8d a7       	std	Y+45, r24	; 0x2d
    1bec:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_vSendCMD+0xd4>
    1bf4:	9e a7       	std	Y+46, r25	; 0x2e
    1bf6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c04:	98 a9       	ldd	r25, Y+48	; 0x30
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_vSendCMD+0xc8>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_vSendCMD+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c10:	8b a9       	ldd	r24, Y+51	; 0x33
    1c12:	9c a9       	ldd	r25, Y+52	; 0x34
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	98 ab       	std	Y+48, r25	; 0x30
    1c1e:	8f a7       	std	Y+47, r24	; 0x2f
    1c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c22:	98 a9       	ldd	r25, Y+48	; 0x30
    1c24:	9c a7       	std	Y+44, r25	; 0x2c
    1c26:	8b a7       	std	Y+43, r24	; 0x2b
    1c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_vSendCMD+0x110>
    1c30:	9c a7       	std	Y+44, r25	; 0x2c
    1c32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, HIGH);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a8 e4       	ldi	r26, 0x48	; 72
    1c44:	b2 e4       	ldi	r27, 0x42	; 66
    1c46:	8f a3       	std	Y+39, r24	; 0x27
    1c48:	98 a7       	std	Y+40, r25	; 0x28
    1c4a:	a9 a7       	std	Y+41, r26	; 0x29
    1c4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c50:	78 a5       	ldd	r23, Y+40	; 0x28
    1c52:	89 a5       	ldd	r24, Y+41	; 0x29
    1c54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8b a3       	std	Y+35, r24	; 0x23
    1c68:	9c a3       	std	Y+36, r25	; 0x24
    1c6a:	ad a3       	std	Y+37, r26	; 0x25
    1c6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c70:	7c a1       	ldd	r23, Y+36	; 0x24
    1c72:	8d a1       	ldd	r24, Y+37	; 0x25
    1c74:	9e a1       	ldd	r25, Y+38	; 0x26
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_vSendCMD+0x174>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9a a3       	std	Y+34, r25	; 0x22
    1c8c:	89 a3       	std	Y+33, r24	; 0x21
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_vSendCMD+0x1f2>
	else if (__tmp > 65535)
    1c90:	6b a1       	ldd	r22, Y+35	; 0x23
    1c92:	7c a1       	ldd	r23, Y+36	; 0x24
    1c94:	8d a1       	ldd	r24, Y+37	; 0x25
    1c96:	9e a1       	ldd	r25, Y+38	; 0x26
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_vSendCMD+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6f a1       	ldd	r22, Y+39	; 0x27
    1caa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cac:	89 a5       	ldd	r24, Y+41	; 0x29
    1cae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9a a3       	std	Y+34, r25	; 0x22
    1cce:	89 a3       	std	Y+33, r24	; 0x21
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_vSendCMD+0x1d4>
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	98 a3       	std	Y+32, r25	; 0x20
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
    1cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cdc:	98 a1       	ldd	r25, Y+32	; 0x20
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_vSendCMD+0x1c2>
    1ce2:	98 a3       	std	Y+32, r25	; 0x20
    1ce4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_vSendCMD+0x1b6>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <LCD_vSendCMD+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1d00:	9e a1       	ldd	r25, Y+38	; 0x26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	9e 8f       	std	Y+30, r25	; 0x1e
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
    1d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_vSendCMD+0x1fe>
    1d1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SET_GROUP_VALUE(LCD_DATA_PORT, cmd);
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	69 ad       	ldd	r22, Y+57	; 0x39
    1d26:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SET_GROUP_VALUE>
	SET_GROUP_VALUE(LCD_DATA_PORT, cmd);
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d2e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SET_GROUP_VALUE>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a8 e4       	ldi	r26, 0x48	; 72
    1d38:	b2 e4       	ldi	r27, 0x42	; 66
    1d3a:	89 8f       	std	Y+25, r24	; 0x19
    1d3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	8d 8b       	std	Y+21, r24	; 0x15
    1d5c:	9e 8b       	std	Y+22, r25	; 0x16
    1d5e:	af 8b       	std	Y+23, r26	; 0x17
    1d60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d62:	6d 89       	ldd	r22, Y+21	; 0x15
    1d64:	7e 89       	ldd	r23, Y+22	; 0x16
    1d66:	8f 89       	ldd	r24, Y+23	; 0x17
    1d68:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e8       	ldi	r20, 0x80	; 128
    1d70:	5f e3       	ldi	r21, 0x3F	; 63
    1d72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d76:	88 23       	and	r24, r24
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <LCD_vSendCMD+0x268>
		__ticks = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
    1d82:	3f c0       	rjmp	.+126    	; 0x1e02 <LCD_vSendCMD+0x2e6>
	else if (__tmp > 65535)
    1d84:	6d 89       	ldd	r22, Y+21	; 0x15
    1d86:	7e 89       	ldd	r23, Y+22	; 0x16
    1d88:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	4c f5       	brge	.+82     	; 0x1dee <LCD_vSendCMD+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <LCD_vSendCMD+0x2c8>
    1dc6:	88 ec       	ldi	r24, 0xC8	; 200
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9a 8b       	std	Y+18, r25	; 0x12
    1dcc:	89 8b       	std	Y+17, r24	; 0x11
    1dce:	89 89       	ldd	r24, Y+17	; 0x11
    1dd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_vSendCMD+0x2b6>
    1dd6:	9a 8b       	std	Y+18, r25	; 0x12
    1dd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	9c 8b       	std	Y+20, r25	; 0x14
    1de2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de4:	8b 89       	ldd	r24, Y+19	; 0x13
    1de6:	9c 89       	ldd	r25, Y+20	; 0x14
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	69 f7       	brne	.-38     	; 0x1dc6 <LCD_vSendCMD+0x2aa>
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <LCD_vSendCMD+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dee:	6d 89       	ldd	r22, Y+21	; 0x15
    1df0:	7e 89       	ldd	r23, Y+22	; 0x16
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	98 8d       	ldd	r25, Y+24	; 0x18
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	9c 89       	ldd	r25, Y+20	; 0x14
    1e06:	98 8b       	std	Y+16, r25	; 0x10
    1e08:	8f 87       	std	Y+15, r24	; 0x0f
    1e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e0c:	98 89       	ldd	r25, Y+16	; 0x10
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_vSendCMD+0x2f2>
    1e12:	98 8b       	std	Y+16, r25	; 0x10
    1e14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, LOW);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a8 e4       	ldi	r26, 0x48	; 72
    1e26:	b2 e4       	ldi	r27, 0x42	; 66
    1e28:	8b 87       	std	Y+11, r24	; 0x0b
    1e2a:	9c 87       	std	Y+12, r25	; 0x0c
    1e2c:	ad 87       	std	Y+13, r26	; 0x0d
    1e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 83       	std	Y+7, r24	; 0x07
    1e4a:	98 87       	std	Y+8, r25	; 0x08
    1e4c:	a9 87       	std	Y+9, r26	; 0x09
    1e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <LCD_vSendCMD+0x356>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <LCD_vSendCMD+0x3d4>
	else if (__tmp > 65535)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <LCD_vSendCMD+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_vSendCMD+0x3b6>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_vSendCMD+0x3a4>
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <LCD_vSendCMD+0x398>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <LCD_vSendCMD+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_vSendCMD+0x3e0>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	//SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, HIGH);
	//_delay_ms(50);
}
    1f04:	e9 96       	adiw	r28, 0x39	; 57
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <LCD_vSendData>:

void LCD_vSendData(u8 data)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	e9 97       	sbiw	r28, 0x39	; 57
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	89 af       	std	Y+57, r24	; 0x39
	SET_PIN_VALUE(LCD_CTRL_PORT, RS_PIN, HIGH);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(LCD_CTRL_PORT, RW_PIN, LOW);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, LOW);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a8 e4       	ldi	r26, 0x48	; 72
    1f50:	b2 e4       	ldi	r27, 0x42	; 66
    1f52:	8d ab       	std	Y+53, r24	; 0x35
    1f54:	9e ab       	std	Y+54, r25	; 0x36
    1f56:	af ab       	std	Y+55, r26	; 0x37
    1f58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f60:	98 ad       	ldd	r25, Y+56	; 0x38
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	89 ab       	std	Y+49, r24	; 0x31
    1f74:	9a ab       	std	Y+50, r25	; 0x32
    1f76:	ab ab       	std	Y+51, r26	; 0x33
    1f78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f80:	9c a9       	ldd	r25, Y+52	; 0x34
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_vSendData+0x86>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	98 ab       	std	Y+48, r25	; 0x30
    1f98:	8f a7       	std	Y+47, r24	; 0x2f
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_vSendData+0x104>
	else if (__tmp > 65535)
    1f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_vSendData+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fba:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	98 ab       	std	Y+48, r25	; 0x30
    1fda:	8f a7       	std	Y+47, r24	; 0x2f
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_vSendData+0xe6>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9e a7       	std	Y+46, r25	; 0x2e
    1fe4:	8d a7       	std	Y+45, r24	; 0x2d
    1fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_vSendData+0xd4>
    1fee:	9e a7       	std	Y+46, r25	; 0x2e
    1ff0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	98 ab       	std	Y+48, r25	; 0x30
    1ffa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_vSendData+0xc8>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_vSendData+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	9c a7       	std	Y+44, r25	; 0x2c
    2020:	8b a7       	std	Y+43, r24	; 0x2b
    2022:	8b a5       	ldd	r24, Y+43	; 0x2b
    2024:	9c a5       	ldd	r25, Y+44	; 0x2c
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_vSendData+0x110>
    202a:	9c a7       	std	Y+44, r25	; 0x2c
    202c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, HIGH);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	62 e0       	ldi	r22, 0x02	; 2
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a8 e4       	ldi	r26, 0x48	; 72
    203e:	b2 e4       	ldi	r27, 0x42	; 66
    2040:	8f a3       	std	Y+39, r24	; 0x27
    2042:	98 a7       	std	Y+40, r25	; 0x28
    2044:	a9 a7       	std	Y+41, r26	; 0x29
    2046:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6f a1       	ldd	r22, Y+39	; 0x27
    204a:	78 a5       	ldd	r23, Y+40	; 0x28
    204c:	89 a5       	ldd	r24, Y+41	; 0x29
    204e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a ef       	ldi	r20, 0xFA	; 250
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8b a3       	std	Y+35, r24	; 0x23
    2062:	9c a3       	std	Y+36, r25	; 0x24
    2064:	ad a3       	std	Y+37, r26	; 0x25
    2066:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <LCD_vSendData+0x174>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9a a3       	std	Y+34, r25	; 0x22
    2086:	89 a3       	std	Y+33, r24	; 0x21
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <LCD_vSendData+0x1f2>
	else if (__tmp > 65535)
    208a:	6b a1       	ldd	r22, Y+35	; 0x23
    208c:	7c a1       	ldd	r23, Y+36	; 0x24
    208e:	8d a1       	ldd	r24, Y+37	; 0x25
    2090:	9e a1       	ldd	r25, Y+38	; 0x26
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <LCD_vSendData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6f a1       	ldd	r22, Y+39	; 0x27
    20a4:	78 a5       	ldd	r23, Y+40	; 0x28
    20a6:	89 a5       	ldd	r24, Y+41	; 0x29
    20a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <LCD_vSendData+0x1d4>
    20cc:	88 ec       	ldi	r24, 0xC8	; 200
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	98 a3       	std	Y+32, r25	; 0x20
    20d2:	8f 8f       	std	Y+31, r24	; 0x1f
    20d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d6:	98 a1       	ldd	r25, Y+32	; 0x20
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_vSendData+0x1c2>
    20dc:	98 a3       	std	Y+32, r25	; 0x20
    20de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	89 a1       	ldd	r24, Y+33	; 0x21
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <LCD_vSendData+0x1b6>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <LCD_vSendData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6b a1       	ldd	r22, Y+35	; 0x23
    20f6:	7c a1       	ldd	r23, Y+36	; 0x24
    20f8:	8d a1       	ldd	r24, Y+37	; 0x25
    20fa:	9e a1       	ldd	r25, Y+38	; 0x26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9a a3       	std	Y+34, r25	; 0x22
    2106:	89 a3       	std	Y+33, r24	; 0x21
    2108:	89 a1       	ldd	r24, Y+33	; 0x21
    210a:	9a a1       	ldd	r25, Y+34	; 0x22
    210c:	9e 8f       	std	Y+30, r25	; 0x1e
    210e:	8d 8f       	std	Y+29, r24	; 0x1d
    2110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_vSendData+0x1fe>
    2118:	9e 8f       	std	Y+30, r25	; 0x1e
    211a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SET_GROUP_VALUE(LCD_DATA_PORT, data);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	69 ad       	ldd	r22, Y+57	; 0x39
    2120:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SET_GROUP_VALUE>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a8 e4       	ldi	r26, 0x48	; 72
    212a:	b2 e4       	ldi	r27, 0x42	; 66
    212c:	89 8f       	std	Y+25, r24	; 0x19
    212e:	9a 8f       	std	Y+26, r25	; 0x1a
    2130:	ab 8f       	std	Y+27, r26	; 0x1b
    2132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	69 8d       	ldd	r22, Y+25	; 0x19
    2136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a ef       	ldi	r20, 0xFA	; 250
    2142:	54 e4       	ldi	r21, 0x44	; 68
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	8d 8b       	std	Y+21, r24	; 0x15
    214e:	9e 8b       	std	Y+22, r25	; 0x16
    2150:	af 8b       	std	Y+23, r26	; 0x17
    2152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2154:	6d 89       	ldd	r22, Y+21	; 0x15
    2156:	7e 89       	ldd	r23, Y+22	; 0x16
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	2c f4       	brge	.+10     	; 0x2176 <LCD_vSendData+0x260>
		__ticks = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9c 8b       	std	Y+20, r25	; 0x14
    2172:	8b 8b       	std	Y+19, r24	; 0x13
    2174:	3f c0       	rjmp	.+126    	; 0x21f4 <LCD_vSendData+0x2de>
	else if (__tmp > 65535)
    2176:	6d 89       	ldd	r22, Y+21	; 0x15
    2178:	7e 89       	ldd	r23, Y+22	; 0x16
    217a:	8f 89       	ldd	r24, Y+23	; 0x17
    217c:	98 8d       	ldd	r25, Y+24	; 0x18
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218a:	18 16       	cp	r1, r24
    218c:	4c f5       	brge	.+82     	; 0x21e0 <LCD_vSendData+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	69 8d       	ldd	r22, Y+25	; 0x19
    2190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <LCD_vSendData+0x2c0>
    21b8:	88 ec       	ldi	r24, 0xC8	; 200
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	9a 89       	ldd	r25, Y+18	; 0x12
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_vSendData+0x2ae>
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <LCD_vSendData+0x2a2>
    21de:	14 c0       	rjmp	.+40     	; 0x2208 <LCD_vSendData+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	6d 89       	ldd	r22, Y+21	; 0x15
    21e2:	7e 89       	ldd	r23, Y+22	; 0x16
    21e4:	8f 89       	ldd	r24, Y+23	; 0x17
    21e6:	98 8d       	ldd	r25, Y+24	; 0x18
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9c 8b       	std	Y+20, r25	; 0x14
    21f2:	8b 8b       	std	Y+19, r24	; 0x13
    21f4:	8b 89       	ldd	r24, Y+19	; 0x13
    21f6:	9c 89       	ldd	r25, Y+20	; 0x14
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	98 89       	ldd	r25, Y+16	; 0x10
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_vSendData+0x2ea>
    2204:	98 8b       	std	Y+16, r25	; 0x10
    2206:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, LOW);
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	62 e0       	ldi	r22, 0x02	; 2
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a8 e4       	ldi	r26, 0x48	; 72
    2218:	b2 e4       	ldi	r27, 0x42	; 66
    221a:	8b 87       	std	Y+11, r24	; 0x0b
    221c:	9c 87       	std	Y+12, r25	; 0x0c
    221e:	ad 87       	std	Y+13, r26	; 0x0d
    2220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6b 85       	ldd	r22, Y+11	; 0x0b
    2224:	7c 85       	ldd	r23, Y+12	; 0x0c
    2226:	8d 85       	ldd	r24, Y+13	; 0x0d
    2228:	9e 85       	ldd	r25, Y+14	; 0x0e
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8f 83       	std	Y+7, r24	; 0x07
    223c:	98 87       	std	Y+8, r25	; 0x08
    223e:	a9 87       	std	Y+9, r26	; 0x09
    2240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <LCD_vSendData+0x34e>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <LCD_vSendData+0x3cc>
	else if (__tmp > 65535)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <LCD_vSendData+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <LCD_vSendData+0x3ae>
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_vSendData+0x39c>
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <LCD_vSendData+0x390>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <LCD_vSendData+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_vSendData+0x3d8>
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	//SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, HIGH);
	//_delay_ms(50);
}
    22f6:	e9 96       	adiw	r28, 0x39	; 57
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_Display_Str>:
void LCD_Display_Str(char *s)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <LCD_Display_Str+0x6>
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	9b 83       	std	Y+3, r25	; 0x03
    2316:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0; s[i] != '\0'; i++)
    2318:	19 82       	std	Y+1, r1	; 0x01
    231a:	0e c0       	rjmp	.+28     	; 0x2338 <LCD_Display_Str+0x30>
	{
		LCD_vSendData(s[i]);
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	fc 01       	movw	r30, r24
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	80 81       	ld	r24, Z
    232e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
	//SET_PIN_VALUE(LCD_CTRL_PORT, EN_PIN, HIGH);
	//_delay_ms(50);
}
void LCD_Display_Str(char *s)
{
	for(u8 i = 0; s[i] != '\0'; i++)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	fc 01       	movw	r30, r24
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	80 81       	ld	r24, Z
    234a:	88 23       	and	r24, r24
    234c:	39 f7       	brne	.-50     	; 0x231c <LCD_Display_Str+0x14>
	{
		LCD_vSendData(s[i]);
	}
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LCD_GOTO_ROW_COL>:
void LCD_GOTO_ROW_COL(u8 R,u8 C)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <LCD_GOTO_ROW_COL+0x6>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	6b 83       	std	Y+3, r22	; 0x03
	u8 x;
	if(R == 0)
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	88 23       	and	r24, r24
    236e:	19 f4       	brne	.+6      	; 0x2376 <LCD_GOTO_ROW_COL+0x1c>
	{
		x = LCD_ROW_0 + C;
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <LCD_GOTO_ROW_COL+0x28>
	}
	else if (R == 1)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	19 f4       	brne	.+6      	; 0x2382 <LCD_GOTO_ROW_COL+0x28>
	{
		x = LCD_ROW_1 + C;
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	80 5c       	subi	r24, 0xC0	; 192
    2380:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_vSendCMD(SET_CURSOR_LOCATION | x);
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	80 68       	ori	r24, 0x80	; 128
    2386:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>


}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <LCD_Display_str_ROW_COL>:
void LCD_Display_str_ROW_COL(char* w,u8 R,u8 C)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <LCD_Display_str_ROW_COL+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <LCD_Display_str_ROW_COL+0x8>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6b 83       	std	Y+3, r22	; 0x03
    23a8:	4c 83       	std	Y+4, r20	; 0x04
	LCD_GOTO_ROW_COL(R,C);
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	6c 81       	ldd	r22, Y+4	; 0x04
    23ae:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_GOTO_ROW_COL>
	LCD_Display_Str(w);
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	9a 81       	ldd	r25, Y+2	; 0x02
    23b6:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <LCD_Display_NUM>:
void LCD_Display_NUM(u32 k)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	2d 97       	sbiw	r28, 0x0d	; 13
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	9d 87       	std	Y+13, r25	; 0x0d
    23de:	8c 87       	std	Y+12, r24	; 0x0c
	u8 store_digits[5], i = 0;
    23e0:	1e 82       	std	Y+6, r1	; 0x06
	u8 pos = 0,f = 0;
    23e2:	1d 82       	std	Y+5, r1	; 0x05
    23e4:	1c 82       	std	Y+4, r1	; 0x04
    23e6:	21 c0       	rjmp	.+66     	; 0x242a <LCD_Display_NUM+0x62>
	while(k != 0)
	{
			store_digits[i] = (k % 10) + '0';
    23e8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ea:	e8 2f       	mov	r30, r24
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    23f2:	2a e0       	ldi	r18, 0x0A	; 10
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	b9 01       	movw	r22, r18
    23f8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__udivmodhi4>
    23fc:	28 2f       	mov	r18, r24
    23fe:	20 5d       	subi	r18, 0xD0	; 208
    2400:	ce 01       	movw	r24, r28
    2402:	07 96       	adiw	r24, 0x07	; 7
    2404:	e8 0f       	add	r30, r24
    2406:	f9 1f       	adc	r31, r25
    2408:	20 83       	st	Z, r18
			k /= 10;
    240a:	8c 85       	ldd	r24, Y+12	; 0x0c
    240c:	9d 85       	ldd	r25, Y+13	; 0x0d
    240e:	2a e0       	ldi	r18, 0x0A	; 10
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	b9 01       	movw	r22, r18
    2414:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__udivmodhi4>
    2418:	cb 01       	movw	r24, r22
    241a:	9d 87       	std	Y+13, r25	; 0x0d
    241c:	8c 87       	std	Y+12, r24	; 0x0c
			i++;f++;
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	8f 5f       	subi	r24, 0xFF	; 255
    2422:	8e 83       	std	Y+6, r24	; 0x06
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	8c 83       	std	Y+4, r24	; 0x04
}
void LCD_Display_NUM(u32 k)
{
	u8 store_digits[5], i = 0;
	u8 pos = 0,f = 0;
	while(k != 0)
    242a:	8c 85       	ldd	r24, Y+12	; 0x0c
    242c:	9d 85       	ldd	r25, Y+13	; 0x0d
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	d9 f6       	brne	.-74     	; 0x23e8 <LCD_Display_NUM+0x20>
			i++;f++;


	}

u8 s = i / 2;
    2432:	8e 81       	ldd	r24, Y+6	; 0x06
    2434:	86 95       	lsr	r24
    2436:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 j = 0; j < s; j++)
    2438:	1a 82       	std	Y+2, r1	; 0x02
    243a:	2c c0       	rjmp	.+88     	; 0x2494 <LCD_Display_NUM+0xcc>
	{
		i--;
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	81 50       	subi	r24, 0x01	; 1
    2440:	8e 83       	std	Y+6, r24	; 0x06
		pos = store_digits[i];
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	ce 01       	movw	r24, r28
    244a:	07 96       	adiw	r24, 0x07	; 7
    244c:	fc 01       	movw	r30, r24
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	80 81       	ld	r24, Z
    2454:	8d 83       	std	Y+5, r24	; 0x05
		store_digits[i] = store_digits[j];
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	48 2f       	mov	r20, r24
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	ce 01       	movw	r24, r28
    2464:	07 96       	adiw	r24, 0x07	; 7
    2466:	fc 01       	movw	r30, r24
    2468:	e2 0f       	add	r30, r18
    246a:	f3 1f       	adc	r31, r19
    246c:	20 81       	ld	r18, Z
    246e:	ce 01       	movw	r24, r28
    2470:	07 96       	adiw	r24, 0x07	; 7
    2472:	fc 01       	movw	r30, r24
    2474:	e4 0f       	add	r30, r20
    2476:	f5 1f       	adc	r31, r21
    2478:	20 83       	st	Z, r18
		store_digits[j] = pos;
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	ce 01       	movw	r24, r28
    2482:	07 96       	adiw	r24, 0x07	; 7
    2484:	fc 01       	movw	r30, r24
    2486:	e2 0f       	add	r30, r18
    2488:	f3 1f       	adc	r31, r19
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	80 83       	st	Z, r24


	}

u8 s = i / 2;
	for(u8 j = 0; j < s; j++)
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	8a 83       	std	Y+2, r24	; 0x02
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	98 17       	cp	r25, r24
    249a:	80 f2       	brcs	.-96     	; 0x243c <LCD_Display_NUM+0x74>
		store_digits[i] = store_digits[j];
		store_digits[j] = pos;
		//i--;
	}

	store_digits[f] = '\0';
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	ce 01       	movw	r24, r28
    24a4:	07 96       	adiw	r24, 0x07	; 7
    24a6:	fc 01       	movw	r30, r24
    24a8:	e2 0f       	add	r30, r18
    24aa:	f3 1f       	adc	r31, r19
    24ac:	10 82       	st	Z, r1
	for(u8 j = 0; j < f; j++)
    24ae:	19 82       	std	Y+1, r1	; 0x01
    24b0:	28 c0       	rjmp	.+80     	; 0x2502 <LCD_Display_NUM+0x13a>
	{
		if(store_digits[j] < '0' || store_digits[j] > '9')
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	ce 01       	movw	r24, r28
    24ba:	07 96       	adiw	r24, 0x07	; 7
    24bc:	fc 01       	movw	r30, r24
    24be:	e2 0f       	add	r30, r18
    24c0:	f3 1f       	adc	r31, r19
    24c2:	80 81       	ld	r24, Z
    24c4:	80 33       	cpi	r24, 0x30	; 48
    24c6:	58 f0       	brcs	.+22     	; 0x24de <LCD_Display_NUM+0x116>
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	ce 01       	movw	r24, r28
    24d0:	07 96       	adiw	r24, 0x07	; 7
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	8a 33       	cpi	r24, 0x3A	; 58
    24dc:	20 f0       	brcs	.+8      	; 0x24e6 <LCD_Display_NUM+0x11e>
			LCD_vSendData(' ');
    24de:	80 e2       	ldi	r24, 0x20	; 32
    24e0:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <LCD_Display_NUM+0x134>
		else
			LCD_vSendData(store_digits[j]);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	ce 01       	movw	r24, r28
    24ee:	07 96       	adiw	r24, 0x07	; 7
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
		store_digits[j] = pos;
		//i--;
	}

	store_digits[f] = '\0';
	for(u8 j = 0; j < f; j++)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	99 81       	ldd	r25, Y+1	; 0x01
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	98 17       	cp	r25, r24
    2508:	a0 f2       	brcs	.-88     	; 0x24b2 <LCD_Display_NUM+0xea>
			LCD_vSendData(' ');
		else
			LCD_vSendData(store_digits[j]);
	}

}
    250a:	2d 96       	adiw	r28, 0x0d	; 13
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <USART_CFG>:
void USART_CFG(void)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRD,PIN_0);
    2524:	a1 e3       	ldi	r26, 0x31	; 49
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e1 e3       	ldi	r30, 0x31	; 49
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8e 7f       	andi	r24, 0xFE	; 254
    2530:	8c 93       	st	X, r24
	SET_BIT(DDRD,PIN_1);
    2532:	a1 e3       	ldi	r26, 0x31	; 49
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e1 e3       	ldi	r30, 0x31	; 49
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	82 60       	ori	r24, 0x02	; 2
    253e:	8c 93       	st	X, r24
	UART_vInit();
    2540:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vInit>
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <Disply_DATA_UAR>:
void Disply_DATA_UAR(void)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	u8 rec = 0;
    2554:	19 82       	std	Y+1, r1	; 0x01

	rec = UART_RECIV();
    2556:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    255a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSendData(rec);
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
}
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <Display_RESULT_OF_CALC>:
void Display_RESULT_OF_CALC(void)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	27 97       	sbiw	r28, 0x07	; 7
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
	u8 x = 0, y = 0;
    257e:	1d 82       	std	Y+5, r1	; 0x05
    2580:	1c 82       	std	Y+4, r1	; 0x04
	u8 op = 0 , eq = 0;
    2582:	1b 82       	std	Y+3, r1	; 0x03
    2584:	1a 82       	std	Y+2, r1	; 0x02
	u8 result = 0;
    2586:	19 82       	std	Y+1, r1	; 0x01
	x = UART_RECIV();
    2588:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    258c:	8d 83       	std	Y+5, r24	; 0x05
	LCD_vSendData(x);
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
	op = UART_RECIV();
    2594:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    2598:	8b 83       	std	Y+3, r24	; 0x03
	LCD_vSendData(op);
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
	y = UART_RECIV();
    25a0:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    25a4:	8c 83       	std	Y+4, r24	; 0x04
	LCD_vSendData(y);
    25a6:	8c 81       	ldd	r24, Y+4	; 0x04
    25a8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
	eq = UART_RECIV();
    25ac:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    25b0:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vSendData(eq);
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
	x-= '0';
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	80 53       	subi	r24, 0x30	; 48
    25bc:	8d 83       	std	Y+5, r24	; 0x05
	y -= '0';
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	80 53       	subi	r24, 0x30	; 48
    25c2:	8c 83       	std	Y+4, r24	; 0x04
	switch(op)
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	3f 83       	std	Y+7, r19	; 0x07
    25cc:	2e 83       	std	Y+6, r18	; 0x06
    25ce:	8e 81       	ldd	r24, Y+6	; 0x06
    25d0:	9f 81       	ldd	r25, Y+7	; 0x07
    25d2:	8b 32       	cpi	r24, 0x2B	; 43
    25d4:	91 05       	cpc	r25, r1
    25d6:	d9 f0       	breq	.+54     	; 0x260e <Display_RESULT_OF_CALC+0xa4>
    25d8:	2e 81       	ldd	r18, Y+6	; 0x06
    25da:	3f 81       	ldd	r19, Y+7	; 0x07
    25dc:	2c 32       	cpi	r18, 0x2C	; 44
    25de:	31 05       	cpc	r19, r1
    25e0:	5c f4       	brge	.+22     	; 0x25f8 <Display_RESULT_OF_CALC+0x8e>
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	85 32       	cpi	r24, 0x25	; 37
    25e8:	91 05       	cpc	r25, r1
    25ea:	11 f1       	breq	.+68     	; 0x2630 <Display_RESULT_OF_CALC+0xc6>
    25ec:	2e 81       	ldd	r18, Y+6	; 0x06
    25ee:	3f 81       	ldd	r19, Y+7	; 0x07
    25f0:	2a 32       	cpi	r18, 0x2A	; 42
    25f2:	31 05       	cpc	r19, r1
    25f4:	89 f0       	breq	.+34     	; 0x2618 <Display_RESULT_OF_CALC+0xae>
    25f6:	36 c0       	rjmp	.+108    	; 0x2664 <Display_RESULT_OF_CALC+0xfa>
    25f8:	8e 81       	ldd	r24, Y+6	; 0x06
    25fa:	9f 81       	ldd	r25, Y+7	; 0x07
    25fc:	8d 32       	cpi	r24, 0x2D	; 45
    25fe:	91 05       	cpc	r25, r1
    2600:	91 f0       	breq	.+36     	; 0x2626 <Display_RESULT_OF_CALC+0xbc>
    2602:	2e 81       	ldd	r18, Y+6	; 0x06
    2604:	3f 81       	ldd	r19, Y+7	; 0x07
    2606:	2f 32       	cpi	r18, 0x2F	; 47
    2608:	31 05       	cpc	r19, r1
    260a:	d1 f0       	breq	.+52     	; 0x2640 <Display_RESULT_OF_CALC+0xd6>
    260c:	2b c0       	rjmp	.+86     	; 0x2664 <Display_RESULT_OF_CALC+0xfa>
	{
	//((x + y) -'0')
	case '+' : result = (x + y);break;
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	89 0f       	add	r24, r25
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	2d c0       	rjmp	.+90     	; 0x2672 <Display_RESULT_OF_CALC+0x108>
	case '*' : result = (x * y);break;
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	89 9f       	mul	r24, r25
    261e:	80 2d       	mov	r24, r0
    2620:	11 24       	eor	r1, r1
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	26 c0       	rjmp	.+76     	; 0x2672 <Display_RESULT_OF_CALC+0x108>
	case '-' : result = (x - y);break;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	89 1b       	sub	r24, r25
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	21 c0       	rjmp	.+66     	; 0x2672 <Display_RESULT_OF_CALC+0x108>
	case '%' : result = (x % y);break;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	69 2f       	mov	r22, r25
    2636:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodqi4>
    263a:	89 2f       	mov	r24, r25
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	19 c0       	rjmp	.+50     	; 0x2672 <Display_RESULT_OF_CALC+0x108>
	case '/' :
		if(y == 0)
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	88 23       	and	r24, r24
    2644:	41 f4       	brne	.+16     	; 0x2656 <Display_RESULT_OF_CALC+0xec>
		{
			LCD_vSendCMD(CLEAR_COMMAND);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
			LCD_Display_Str("MATH Erro!");
    264c:	80 e6       	ldi	r24, 0x60	; 96
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
    2654:	1d c0       	rjmp	.+58     	; 0x2690 <Display_RESULT_OF_CALC+0x126>
			return;
		}
		else
			result = (x / y);
    2656:	8d 81       	ldd	r24, Y+5	; 0x05
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	69 2f       	mov	r22, r25
    265c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodqi4>
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	07 c0       	rjmp	.+14     	; 0x2672 <Display_RESULT_OF_CALC+0x108>
		break;
	default:
		LCD_vSendCMD(CLEAR_COMMAND);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
		LCD_Display_Str("MATH Erro!");break;
    266a:	80 e6       	ldi	r24, 0x60	; 96
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
	}
	if(eq == '=')
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	8d 33       	cpi	r24, 0x3D	; 61
    2676:	61 f4       	brne	.+24     	; 0x2690 <Display_RESULT_OF_CALC+0x126>
	{
		/*LCD_GOTO_ROW_COL(1,0);
		LCD_Display_Str("Result = ");*/
		if(result == 0)
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	88 23       	and	r24, r24
    267c:	21 f4       	brne	.+8      	; 0x2686 <Display_RESULT_OF_CALC+0x11c>
			LCD_vSendData('0');
    267e:	80 e3       	ldi	r24, 0x30	; 48
    2680:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
    2684:	05 c0       	rjmp	.+10     	; 0x2690 <Display_RESULT_OF_CALC+0x126>
		else
			LCD_Display_NUM(result);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LCD_Display_NUM>


	}

}
    2690:	27 96       	adiw	r28, 0x07	; 7
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <KEYPAD_Init>:
{'4','5','6','-'},
{'7','8','9','*'},
{'%','0','=','/'}	
}; 
void KEYPAD_Init(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
	//cols mode 
	SET_PIN_DIR(KEYPAD_PORT,COL0,OUTPUT);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,COL1,OUTPUT);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,COL2,OUTPUT);
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	62 e0       	ldi	r22, 0x02	; 2
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,COL3,OUTPUT);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	63 e0       	ldi	r22, 0x03	; 3
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	// cols value
	SET_PIN_VALUE(KEYPAD_PORT,COL0,HIGH);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,COL1,HIGH);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,COL2,HIGH);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	62 e0       	ldi	r22, 0x02	; 2
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,COL3,HIGH);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	63 e0       	ldi	r22, 0x03	; 3
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	//ROWS mode 
	SET_PIN_DIR(KEYPAD_PORT,ROW0,INPUT);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	64 e0       	ldi	r22, 0x04	; 4
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,ROW1,INPUT);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	65 e0       	ldi	r22, 0x05	; 5
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,ROW2,INPUT);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	66 e0       	ldi	r22, 0x06	; 6
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	SET_PIN_DIR(KEYPAD_PORT,ROW3,INPUT);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	67 e0       	ldi	r22, 0x07	; 7
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	0e 94 ac 07 	call	0xf58	; 0xf58 <SET_PIN_DIR>
	// ROWS value
	SET_PIN_VALUE(KEYPAD_PORT,ROW0,HIGH);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,ROW1,HIGH);
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,ROW2,HIGH);
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	66 e0       	ldi	r22, 0x06	; 6
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
	SET_PIN_VALUE(KEYPAD_PORT,ROW3,HIGH);	
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	67 e0       	ldi	r22, 0x07	; 7
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
}
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <KEYPAD_Get_Value>:
u8 KEYPAD_Get_Value(void)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <KEYPAD_Get_Value+0x6>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <KEYPAD_Get_Value+0x8>
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	u8 col_count;
	u8 Row_count;
	u8 value = '\0';
    275c:	19 82       	std	Y+1, r1	; 0x01
	for(col_count = COL0; col_count <= COL3; col_count ++)
    275e:	1b 82       	std	Y+3, r1	; 0x03
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <KEYPAD_Get_Value+0x90>
	{
		SET_PIN_VALUE(KEYPAD_PORT,col_count,LOW);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	6b 81       	ldd	r22, Y+3	; 0x03
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
		for(Row_count = ROW0; Row_count <= ROW3; Row_count ++)
    276c:	84 e0       	ldi	r24, 0x04	; 4
    276e:	8a 83       	std	Y+2, r24	; 0x02
    2770:	2c c0       	rjmp	.+88     	; 0x27ca <KEYPAD_Get_Value+0x7a>
		{
			if(READ_PIN_VALUE(KEYPAD_PORT,Row_count) == PRESSED)
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	6a 81       	ldd	r22, Y+2	; 0x02
    2776:	0e 94 a4 09 	call	0x1348	; 0x1348 <READ_PIN_VALUE>
    277a:	88 23       	and	r24, r24
    277c:	19 f5       	brne	.+70     	; 0x27c4 <KEYPAD_Get_Value+0x74>
			{
				while(READ_PIN_VALUE(KEYPAD_PORT,Row_count) == PRESSED);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	6a 81       	ldd	r22, Y+2	; 0x02
    2782:	0e 94 a4 09 	call	0x1348	; 0x1348 <READ_PIN_VALUE>
    2786:	88 23       	and	r24, r24
    2788:	d1 f3       	breq	.-12     	; 0x277e <KEYPAD_Get_Value+0x2e>
				value = KEYPAD_VALUES[Row_count - ROW0][col_count];
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	ac 01       	movw	r20, r24
    2792:	44 50       	subi	r20, 0x04	; 4
    2794:	50 40       	sbci	r21, 0x00	; 0
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	ca 01       	movw	r24, r20
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	fc 01       	movw	r30, r24
    27ac:	e9 53       	subi	r30, 0x39	; 57
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	89 83       	std	Y+1, r24	; 0x01
				SET_PIN_VALUE(KEYPAD_PORT,col_count,HIGH);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	6b 81       	ldd	r22, Y+3	; 0x03
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
				return value;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	8c 83       	std	Y+4, r24	; 0x04
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <KEYPAD_Get_Value+0x9c>
	u8 Row_count;
	u8 value = '\0';
	for(col_count = COL0; col_count <= COL3; col_count ++)
	{
		SET_PIN_VALUE(KEYPAD_PORT,col_count,LOW);
		for(Row_count = ROW0; Row_count <= ROW3; Row_count ++)
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	8f 5f       	subi	r24, 0xFF	; 255
    27c8:	8a 83       	std	Y+2, r24	; 0x02
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	88 30       	cpi	r24, 0x08	; 8
    27ce:	88 f2       	brcs	.-94     	; 0x2772 <KEYPAD_Get_Value+0x22>
				SET_PIN_VALUE(KEYPAD_PORT,col_count,HIGH);
				return value;
				
			}
		}
		SET_PIN_VALUE(KEYPAD_PORT,col_count,HIGH); 
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	6b 81       	ldd	r22, Y+3	; 0x03
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 a8 08 	call	0x1150	; 0x1150 <SET_PIN_VALUE>
u8 KEYPAD_Get_Value(void)
{
	u8 col_count;
	u8 Row_count;
	u8 value = '\0';
	for(col_count = COL0; col_count <= COL3; col_count ++)
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <KEYPAD_Get_Value+0x98>
    27e6:	bd cf       	rjmp	.-134    	; 0x2762 <KEYPAD_Get_Value+0x12>
				
			}
		}
		SET_PIN_VALUE(KEYPAD_PORT,col_count,HIGH); 
	}
	return value;
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	8c 83       	std	Y+4, r24	; 0x04
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <BLUTOOTH_vInit>:
#include "../../MCAL/UART/usart.h"
#include "../../UTILS/BIT_MATH.h"


void BLUTOOTH_vInit(void)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
	UART_vInit();
    2804:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vInit>
	SET_BIT(DDRD,1);
    2808:	a1 e3       	ldi	r26, 0x31	; 49
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e1 e3       	ldi	r30, 0x31	; 49
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	82 60       	ori	r24, 0x02	; 2
    2814:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,0);
    2816:	a1 e3       	ldi	r26, 0x31	; 49
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e1 e3       	ldi	r30, 0x31	; 49
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	8c 93       	st	X, r24
}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <BLUTOOTH_RECIV>:
u16 BLUTOOTH_RECIV(void)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	00 d0       	rcall	.+0      	; 0x2830 <BLUTOOTH_RECIV+0x6>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	u16 return_value = 0;
    2834:	1a 82       	std	Y+2, r1	; 0x02
    2836:	19 82       	std	Y+1, r1	; 0x01
	return_value = UART_RECIV();
    2838:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_RECIV>
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
	return return_value;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <BLUTOOTH_Trans>:
void BLUTOOTH_Trans(u16 data)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <BLUTOOTH_Trans+0x6>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
	UART_Trans(data);
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <UART_Trans>
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <main>:
#include "../HAL/SERVO/SERVO.h"
#include "../HAL/LCD/LCD_CFG.h"
#include "../HAL/BLUTOOTH_MODULE/BLUTOOTH.h"

int main()
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	e5 97       	sbiw	r28, 0x35	; 53
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
	/* these variables using for open & close the serov: */
	const u8 close = 0, open  = 180;
    2882:	1d aa       	std	Y+53, r1	; 0x35
    2884:	84 eb       	ldi	r24, 0xB4	; 180
    2886:	8c ab       	std	Y+52, r24	; 0x34
	// direction of pins that using with buzzer & led:
	DDRB = 0XFF;
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	80 83       	st	Z, r24
	// this variable use to get data from mobile:
	u16 recieve_of_bluetooth = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9b ab       	std	Y+51, r25	; 0x33
    2896:	8a ab       	std	Y+50, r24	; 0x32
	// this variable use to get data from keypad:
	u8 data_of_keypad = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	89 ab       	std	Y+49, r24	; 0x31
	// this variable use to check the state of system opend or closed :
	u8 close_flag = 0;
    289c:	18 aa       	std	Y+48, r1	; 0x30
	// this variable use to counts the number of digit of password:
	u8 numbre_of_digit = 0;
    289e:	1f a6       	std	Y+47, r1	; 0x2f
	// this variable use to counts the number of try fail:
	u8 number_of_faild_tring = 0;
    28a0:	1e a6       	std	Y+46, r1	; 0x2e
	// this variable use to store the input password:
	u16 password = 0 ;
    28a2:	1d a6       	std	Y+45, r1	; 0x2d
    28a4:	1c a6       	std	Y+44, r1	; 0x2c
	// this variable use check on the typing of LCD :
	u8 screen_flag = 0;
    28a6:	1b a6       	std	Y+43, r1	; 0x2b
	// the firmware to initiate the  servo:
	vIniat_function_of_servo();
    28a8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <vIniat_function_of_servo>
	// the firmware to initiate the  keypad:
	KEYPAD_Init();
    28ac:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KEYPAD_Init>
	// the firmware to initiate the  LCD:
	LCD_vInit();
    28b0:	0e 94 97 0b 	call	0x172e	; 0x172e <LCD_vInit>
	// the firmware to initiate the  BLuetooth:
	BLUTOOTH_vInit();
    28b4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <BLUTOOTH_vInit>
	// close the servo:
	vServo_Angle(close);
    28b8:	8d a9       	ldd	r24, Y+53	; 0x35
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vServo_Angle>
	// display on LCD to enter the password:
	 LCD_Display_Str("Enter_password");
    28c2:	8b e6       	ldi	r24, 0x6B	; 107
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>

	while(1)
	{
		/* this block use to get data from the use via the mobile or keypad: */
		data_of_keypad = KEYPAD_Get_Value();
    28ca:	0e 94 a8 13 	call	0x2750	; 0x2750 <KEYPAD_Get_Value>
    28ce:	89 ab       	std	Y+49, r24	; 0x31
		recieve_of_bluetooth = BLUTOOTH_RECIV();
    28d0:	0e 94 15 14 	call	0x282a	; 0x282a <BLUTOOTH_RECIV>
    28d4:	9b ab       	std	Y+51, r25	; 0x33
    28d6:	8a ab       	std	Y+50, r24	; 0x32
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 ef       	ldi	r26, 0xF0	; 240
    28de:	b1 e4       	ldi	r27, 0x41	; 65
    28e0:	8f a3       	std	Y+39, r24	; 0x27
    28e2:	98 a7       	std	Y+40, r25	; 0x28
    28e4:	a9 a7       	std	Y+41, r26	; 0x29
    28e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6f a1       	ldd	r22, Y+39	; 0x27
    28ea:	78 a5       	ldd	r23, Y+40	; 0x28
    28ec:	89 a5       	ldd	r24, Y+41	; 0x29
    28ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8b a3       	std	Y+35, r24	; 0x23
    2902:	9c a3       	std	Y+36, r25	; 0x24
    2904:	ad a3       	std	Y+37, r26	; 0x25
    2906:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2908:	6b a1       	ldd	r22, Y+35	; 0x23
    290a:	7c a1       	ldd	r23, Y+36	; 0x24
    290c:	8d a1       	ldd	r24, Y+37	; 0x25
    290e:	9e a1       	ldd	r25, Y+38	; 0x26
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <main+0xbc>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9a a3       	std	Y+34, r25	; 0x22
    2926:	89 a3       	std	Y+33, r24	; 0x21
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <main+0x13a>
	else if (__tmp > 65535)
    292a:	6b a1       	ldd	r22, Y+35	; 0x23
    292c:	7c a1       	ldd	r23, Y+36	; 0x24
    292e:	8d a1       	ldd	r24, Y+37	; 0x25
    2930:	9e a1       	ldd	r25, Y+38	; 0x26
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6f a1       	ldd	r22, Y+39	; 0x27
    2944:	78 a5       	ldd	r23, Y+40	; 0x28
    2946:	89 a5       	ldd	r24, Y+41	; 0x29
    2948:	9a a5       	ldd	r25, Y+42	; 0x2a
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9a a3       	std	Y+34, r25	; 0x22
    2968:	89 a3       	std	Y+33, r24	; 0x21
    296a:	0f c0       	rjmp	.+30     	; 0x298a <main+0x11c>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	98 a3       	std	Y+32, r25	; 0x20
    2972:	8f 8f       	std	Y+31, r24	; 0x1f
    2974:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2976:	98 a1       	ldd	r25, Y+32	; 0x20
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <main+0x10a>
    297c:	98 a3       	std	Y+32, r25	; 0x20
    297e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	89 a1       	ldd	r24, Y+33	; 0x21
    2982:	9a a1       	ldd	r25, Y+34	; 0x22
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9a a3       	std	Y+34, r25	; 0x22
    2988:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	89 a1       	ldd	r24, Y+33	; 0x21
    298c:	9a a1       	ldd	r25, Y+34	; 0x22
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <main+0xfe>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <main+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6b a1       	ldd	r22, Y+35	; 0x23
    2996:	7c a1       	ldd	r23, Y+36	; 0x24
    2998:	8d a1       	ldd	r24, Y+37	; 0x25
    299a:	9e a1       	ldd	r25, Y+38	; 0x26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9a a3       	std	Y+34, r25	; 0x22
    29a6:	89 a3       	std	Y+33, r24	; 0x21
    29a8:	89 a1       	ldd	r24, Y+33	; 0x21
    29aa:	9a a1       	ldd	r25, Y+34	; 0x22
    29ac:	9e 8f       	std	Y+30, r25	; 0x1e
    29ae:	8d 8f       	std	Y+29, r24	; 0x1d
    29b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0x146>
    29b8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ba:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(30);

		/* this block use to store the value of password from user: */
		if( data_of_keypad > 0 && numbre_of_digit < 4 && data_of_keypad != '+' && data_of_keypad != '/' && close_flag == 0)
    29bc:	89 a9       	ldd	r24, Y+49	; 0x31
    29be:	88 23       	and	r24, r24
    29c0:	91 f1       	breq	.+100    	; 0x2a26 <main+0x1b8>
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	78 f5       	brcc	.+94     	; 0x2a26 <main+0x1b8>
    29c8:	89 a9       	ldd	r24, Y+49	; 0x31
    29ca:	8b 32       	cpi	r24, 0x2B	; 43
    29cc:	61 f1       	breq	.+88     	; 0x2a26 <main+0x1b8>
    29ce:	89 a9       	ldd	r24, Y+49	; 0x31
    29d0:	8f 32       	cpi	r24, 0x2F	; 47
    29d2:	49 f1       	breq	.+82     	; 0x2a26 <main+0x1b8>
    29d4:	88 a9       	ldd	r24, Y+48	; 0x30
    29d6:	88 23       	and	r24, r24
    29d8:	31 f5       	brne	.+76     	; 0x2a26 <main+0x1b8>
		{
			// check the LCD:
			if(screen_flag == 0)
    29da:	8b a5       	ldd	r24, Y+43	; 0x2b
    29dc:	88 23       	and	r24, r24
    29de:	19 f4       	brne	.+6      	; 0x29e6 <main+0x178>
			{
				//clear the LCD:
				LCD_vSendCMD(CLEAR_COMMAND);
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
			}
			// rising the flag by one that mean that LCD is cleared:
			screen_flag = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	8b a7       	std	Y+43, r24	; 0x2b
			//calculate the digit of password and store it in variable:
			password = password * 10 + (data_of_keypad - '0');
    29ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    29ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    29ee:	9c 01       	movw	r18, r24
    29f0:	22 0f       	add	r18, r18
    29f2:	33 1f       	adc	r19, r19
    29f4:	c9 01       	movw	r24, r18
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	28 0f       	add	r18, r24
    2a00:	39 1f       	adc	r19, r25
    2a02:	89 a9       	ldd	r24, Y+49	; 0x31
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	82 0f       	add	r24, r18
    2a0a:	93 1f       	adc	r25, r19
    2a0c:	c0 97       	sbiw	r24, 0x30	; 48
    2a0e:	9d a7       	std	Y+45, r25	; 0x2d
    2a10:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_GOTO_ROW_COL(0,numbre_of_digit);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	6f a5       	ldd	r22, Y+47	; 0x2f
    2a16:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_GOTO_ROW_COL>
			//display the data from user On LCD:
			LCD_vSendData(data_of_keypad);
    2a1a:	89 a9       	ldd	r24, Y+49	; 0x31
    2a1c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <LCD_vSendData>
			//increase the digit counter by 1 even reach to 4 digit:
			numbre_of_digit++;
    2a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a22:	8f 5f       	subi	r24, 0xFF	; 255
    2a24:	8f a7       	std	Y+47, r24	; 0x2f
		}
		/*
		 * '+' meaning or used an "Enter switch" to update the data of user:
		 * 'F' is data from mobile meaning open the system:
		 */
		if((data_of_keypad == '+' || recieve_of_bluetooth == 'F') && close_flag == 0)
    2a26:	89 a9       	ldd	r24, Y+49	; 0x31
    2a28:	8b 32       	cpi	r24, 0x2B	; 43
    2a2a:	31 f0       	breq	.+12     	; 0x2a38 <main+0x1ca>
    2a2c:	8a a9       	ldd	r24, Y+50	; 0x32
    2a2e:	9b a9       	ldd	r25, Y+51	; 0x33
    2a30:	86 34       	cpi	r24, 0x46	; 70
    2a32:	91 05       	cpc	r25, r1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <main+0x1ca>
    2a36:	5c c1       	rjmp	.+696    	; 0x2cf0 <main+0x482>
    2a38:	88 a9       	ldd	r24, Y+48	; 0x30
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <main+0x1d2>
    2a3e:	58 c1       	rjmp	.+688    	; 0x2cf0 <main+0x482>
		{

			LCD_vSendCMD(CLEAR_COMMAND);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
			numbre_of_digit = 0;screen_flag = 0;
    2a46:	1f a6       	std	Y+47, r1	; 0x2f
    2a48:	1b a6       	std	Y+43, r1	; 0x2b
			// check the password from the user:
			if(password == 1234 || recieve_of_bluetooth == 'F')
    2a4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a4c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a4e:	24 e0       	ldi	r18, 0x04	; 4
    2a50:	82 3d       	cpi	r24, 0xD2	; 210
    2a52:	92 07       	cpc	r25, r18
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <main+0x1f2>
    2a56:	8a a9       	ldd	r24, Y+50	; 0x32
    2a58:	9b a9       	ldd	r25, Y+51	; 0x33
    2a5a:	86 34       	cpi	r24, 0x46	; 70
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	71 f4       	brne	.+28     	; 0x2a7c <main+0x20e>
			{
				close_flag = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	88 ab       	std	Y+48, r24	; 0x30
				password = 0;
    2a64:	1d a6       	std	Y+45, r1	; 0x2d
    2a66:	1c a6       	std	Y+44, r1	; 0x2c
				// open the system:
				 LCD_Display_Str("system_opened");
    2a68:	8a e7       	ldi	r24, 0x7A	; 122
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
				 vServo_Angle(open);
    2a70:	8c a9       	ldd	r24, Y+52	; 0x34
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vServo_Angle>
    2a7a:	27 cf       	rjmp	.-434    	; 0x28ca <main+0x5c>

			}
			else
			{
				/* this meaning that the password is not correct: */
				password = 0;
    2a7c:	1d a6       	std	Y+45, r1	; 0x2d
    2a7e:	1c a6       	std	Y+44, r1	; 0x2c
				//increase the number of fail try by 1:
				number_of_faild_tring++;
    2a80:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	8e a7       	std	Y+46, r24	; 0x2e
				// display the error indication:
				 LCD_Display_Str("Error_password");
    2a86:	88 e8       	ldi	r24, 0x88	; 136
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
				 LCD_GOTO_ROW_COL(1,0);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_GOTO_ROW_COL>
				 LCD_Display_Str("Try_again");
    2a96:	87 e9       	ldi	r24, 0x97	; 151
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a8 ec       	ldi	r26, 0xC8	; 200
    2aa4:	b2 e4       	ldi	r27, 0x42	; 66
    2aa6:	89 8f       	std	Y+25, r24	; 0x19
    2aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aaa:	ab 8f       	std	Y+27, r26	; 0x1b
    2aac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8d 8b       	std	Y+21, r24	; 0x15
    2ac8:	9e 8b       	std	Y+22, r25	; 0x16
    2aca:	af 8b       	std	Y+23, r26	; 0x17
    2acc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <main+0x282>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 8b       	std	Y+20, r25	; 0x14
    2aec:	8b 8b       	std	Y+19, r24	; 0x13
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <main+0x300>
	else if (__tmp > 65535)
    2af0:	6d 89       	ldd	r22, Y+21	; 0x15
    2af2:	7e 89       	ldd	r23, Y+22	; 0x16
    2af4:	8f 89       	ldd	r24, Y+23	; 0x17
    2af6:	98 8d       	ldd	r25, Y+24	; 0x18
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <main+0x2e2>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9a 8b       	std	Y+18, r25	; 0x12
    2b38:	89 8b       	std	Y+17, r24	; 0x11
    2b3a:	89 89       	ldd	r24, Y+17	; 0x11
    2b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <main+0x2d0>
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <main+0x2c4>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	98 8d       	ldd	r25, Y+24	; 0x18
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	98 8b       	std	Y+16, r25	; 0x10
    2b74:	8f 87       	std	Y+15, r24	; 0x0f
    2b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b78:	98 89       	ldd	r25, Y+16	; 0x10
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <main+0x30c>
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
				 _delay_ms(100);
				 vServo_Angle(close);             /*for ensure that servo is closed*/
    2b82:	8d a9       	ldd	r24, Y+53	; 0x35
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vServo_Angle>
				 LCD_vSendCMD(CLEAR_COMMAND);
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
				 if(number_of_faild_tring < 3)
    2b92:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	28 f4       	brcc	.+10     	; 0x2ba2 <main+0x334>
				 LCD_Display_Str("Enter_password");
    2b98:	8b e6       	ldi	r24, 0x6B	; 107
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
    2ba0:	94 ce       	rjmp	.-728    	; 0x28ca <main+0x5c>
				 else
				 {
					 // this meaning the number of tring exceed 3 times:
					 // so the system not safe and then we need to end the program:
					 LCD_Display_Str("system_not_safe");
    2ba2:	81 ea       	ldi	r24, 0xA1	; 161
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
    2baa:	85 c0       	rjmp	.+266    	; 0x2cb6 <main+0x448>
					 // this loop using as indicate the system not safe:
					 // by turn on the led & buzzer 3 times every 2 seconds:
					while(number_of_faild_tring <= 3)
					{
						TOGGLE_BIT(PORTB,7);     //led
    2bac:	a8 e3       	ldi	r26, 0x38	; 56
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e8 e3       	ldi	r30, 0x38	; 56
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	90 81       	ld	r25, Z
    2bb6:	80 e8       	ldi	r24, 0x80	; 128
    2bb8:	89 27       	eor	r24, r25
    2bba:	8c 93       	st	X, r24
						TOGGLE_BIT(PORTB,6);    // buzzer
    2bbc:	a8 e3       	ldi	r26, 0x38	; 56
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e8 e3       	ldi	r30, 0x38	; 56
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	90 81       	ld	r25, Z
    2bc6:	80 e4       	ldi	r24, 0x40	; 64
    2bc8:	89 27       	eor	r24, r25
    2bca:	8c 93       	st	X, r24
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	aa ef       	ldi	r26, 0xFA	; 250
    2bd2:	b4 e4       	ldi	r27, 0x44	; 68
    2bd4:	8b 87       	std	Y+11, r24	; 0x0b
    2bd6:	9c 87       	std	Y+12, r25	; 0x0c
    2bd8:	ad 87       	std	Y+13, r26	; 0x0d
    2bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a ef       	ldi	r20, 0xFA	; 250
    2bea:	54 e4       	ldi	r21, 0x44	; 68
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8f 83       	std	Y+7, r24	; 0x07
    2bf6:	98 87       	std	Y+8, r25	; 0x08
    2bf8:	a9 87       	std	Y+9, r26	; 0x09
    2bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	2c f4       	brge	.+10     	; 0x2c1e <main+0x3b0>
		__ticks = 1;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <main+0x42e>
	else if (__tmp > 65535)
    2c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c20:	78 85       	ldd	r23, Y+8	; 0x08
    2c22:	89 85       	ldd	r24, Y+9	; 0x09
    2c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	4c f5       	brge	.+82     	; 0x2c88 <main+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <main+0x410>
    2c60:	88 ec       	ldi	r24, 0xC8	; 200
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <main+0x3fe>
    2c70:	9c 83       	std	Y+4, r25	; 0x04
    2c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	9e 81       	ldd	r25, Y+6	; 0x06
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <main+0x3f2>
    2c86:	14 c0       	rjmp	.+40     	; 0x2cb0 <main+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <main+0x43a>
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);
						number_of_faild_tring--;
    2cb0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2cb2:	81 50       	subi	r24, 0x01	; 1
    2cb4:	8e a7       	std	Y+46, r24	; 0x2e
					 // this meaning the number of tring exceed 3 times:
					 // so the system not safe and then we need to end the program:
					 LCD_Display_Str("system_not_safe");
					 // this loop using as indicate the system not safe:
					 // by turn on the led & buzzer 3 times every 2 seconds:
					while(number_of_faild_tring <= 3)
    2cb6:	8e a5       	ldd	r24, Y+46	; 0x2e
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	08 f4       	brcc	.+2      	; 0x2cbe <main+0x450>
    2cbc:	77 cf       	rjmp	.-274    	; 0x2bac <main+0x33e>
						_delay_ms(2000);
						number_of_faild_tring--;
					}
					// and then End the program:
					// To oprate the program we need to reset the MCU:
					SET_BIT(PORTB,7);
    2cbe:	a8 e3       	ldi	r26, 0x38	; 56
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e8 e3       	ldi	r30, 0x38	; 56
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	80 68       	ori	r24, 0x80	; 128
    2cca:	8c 93       	st	X, r24
					SET_BIT(PORTB,6);
    2ccc:	a8 e3       	ldi	r26, 0x38	; 56
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e8 e3       	ldi	r30, 0x38	; 56
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 64       	ori	r24, 0x40	; 64
    2cd8:	8c 93       	st	X, r24
			LCD_Display_Str("system_closed");
			vServo_Angle(close);
		}

	}
	return 0;
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
}
    2cde:	e5 96       	adiw	r28, 0x35	; 53
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret
					 break;
				 }

			}
		}
		else if( (recieve_of_bluetooth == 'B' || data_of_keypad == '/') && close_flag == 1)
    2cf0:	8a a9       	ldd	r24, Y+50	; 0x32
    2cf2:	9b a9       	ldd	r25, Y+51	; 0x33
    2cf4:	82 34       	cpi	r24, 0x42	; 66
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <main+0x494>
    2cfa:	89 a9       	ldd	r24, Y+49	; 0x31
    2cfc:	8f 32       	cpi	r24, 0x2F	; 47
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <main+0x494>
    2d00:	e4 cd       	rjmp	.-1080   	; 0x28ca <main+0x5c>
    2d02:	88 a9       	ldd	r24, Y+48	; 0x30
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <main+0x49c>
    2d08:	e0 cd       	rjmp	.-1088   	; 0x28ca <main+0x5c>
		{
			close_flag = 0;
    2d0a:	18 aa       	std	Y+48, r1	; 0x30
			password = 0;data_of_keypad = 1;
    2d0c:	1d a6       	std	Y+45, r1	; 0x2d
    2d0e:	1c a6       	std	Y+44, r1	; 0x2c
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	89 ab       	std	Y+49, r24	; 0x31
			LCD_vSendCMD(CLEAR_COMMAND);
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_vSendCMD>
			LCD_Display_Str("system_closed");
    2d1a:	81 eb       	ldi	r24, 0xB1	; 177
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 84 11 	call	0x2308	; 0x2308 <LCD_Display_Str>
			vServo_Angle(close);
    2d22:	8d a9       	ldd	r24, Y+53	; 0x35
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <vServo_Angle>
    2d2c:	ce cd       	rjmp	.-1124   	; 0x28ca <main+0x5c>

00002d2e <__udivmodqi4>:
    2d2e:	99 1b       	sub	r25, r25
    2d30:	79 e0       	ldi	r23, 0x09	; 9
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <__udivmodqi4_ep>

00002d34 <__udivmodqi4_loop>:
    2d34:	99 1f       	adc	r25, r25
    2d36:	96 17       	cp	r25, r22
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <__udivmodqi4_ep>
    2d3a:	96 1b       	sub	r25, r22

00002d3c <__udivmodqi4_ep>:
    2d3c:	88 1f       	adc	r24, r24
    2d3e:	7a 95       	dec	r23
    2d40:	c9 f7       	brne	.-14     	; 0x2d34 <__udivmodqi4_loop>
    2d42:	80 95       	com	r24
    2d44:	08 95       	ret

00002d46 <__udivmodhi4>:
    2d46:	aa 1b       	sub	r26, r26
    2d48:	bb 1b       	sub	r27, r27
    2d4a:	51 e1       	ldi	r21, 0x11	; 17
    2d4c:	07 c0       	rjmp	.+14     	; 0x2d5c <__udivmodhi4_ep>

00002d4e <__udivmodhi4_loop>:
    2d4e:	aa 1f       	adc	r26, r26
    2d50:	bb 1f       	adc	r27, r27
    2d52:	a6 17       	cp	r26, r22
    2d54:	b7 07       	cpc	r27, r23
    2d56:	10 f0       	brcs	.+4      	; 0x2d5c <__udivmodhi4_ep>
    2d58:	a6 1b       	sub	r26, r22
    2d5a:	b7 0b       	sbc	r27, r23

00002d5c <__udivmodhi4_ep>:
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	5a 95       	dec	r21
    2d62:	a9 f7       	brne	.-22     	; 0x2d4e <__udivmodhi4_loop>
    2d64:	80 95       	com	r24
    2d66:	90 95       	com	r25
    2d68:	bc 01       	movw	r22, r24
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	08 95       	ret

00002d6e <__prologue_saves__>:
    2d6e:	2f 92       	push	r2
    2d70:	3f 92       	push	r3
    2d72:	4f 92       	push	r4
    2d74:	5f 92       	push	r5
    2d76:	6f 92       	push	r6
    2d78:	7f 92       	push	r7
    2d7a:	8f 92       	push	r8
    2d7c:	9f 92       	push	r9
    2d7e:	af 92       	push	r10
    2d80:	bf 92       	push	r11
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	ca 1b       	sub	r28, r26
    2d98:	db 0b       	sbc	r29, r27
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	09 94       	ijmp

00002da6 <__epilogue_restores__>:
    2da6:	2a 88       	ldd	r2, Y+18	; 0x12
    2da8:	39 88       	ldd	r3, Y+17	; 0x11
    2daa:	48 88       	ldd	r4, Y+16	; 0x10
    2dac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2db6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2db8:	b9 84       	ldd	r11, Y+9	; 0x09
    2dba:	c8 84       	ldd	r12, Y+8	; 0x08
    2dbc:	df 80       	ldd	r13, Y+7	; 0x07
    2dbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2dc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2dc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2dca:	ce 0f       	add	r28, r30
    2dcc:	d1 1d       	adc	r29, r1
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	ed 01       	movw	r28, r26
    2dda:	08 95       	ret

00002ddc <_exit>:
    2ddc:	f8 94       	cli

00002dde <__stop_program>:
    2dde:	ff cf       	rjmp	.-2      	; 0x2dde <__stop_program>
